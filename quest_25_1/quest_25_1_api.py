# Великий Кодекс Техномагии
# Свиток 25: Продвинутая Контейнеризация
# Квест 25.1: Пергамент с заклинаниями для "Говорящего Амулета"

# Призываем духа 'FastAPI' для создания порталов.
from fastapi import FastAPI
# Призываем духа 'redis' для общения с Хранителем Памяти.
import redis
# Призываем 'os', чтобы читать "секретные руны" окружения.
import os

# Создаем экземпляр нашего приложения-амулета.
app = FastAPI()

# --- Ритуал подключения к Хранителю Памяти ---
# Мы ищем "секретную руну" с адресом Хранителя. 
# Docker-Compose автоматически создаст для нас сеть, где наш Хранитель будет доступен по имени 'redis'.
# Если руна не найдена, мы используем 'localhost' для локального запуска.
redis_host = os.getenv("REDIS_HOST", "localhost")
# Создаем "магический канал" для общения с Хранителем.
r = redis.Redis(host=redis_host, port=6379, db=0, decode_responses=True)


# Создаем портал, через который можно "запомнить" что-то.
@app.post("/remember/{key}")
def remember_value(key: str, value: str):
    # Отправляем приказ Хранителю: "Запомни это значение под этим ключом".
    r.set(key, value)
    # Возвращаем подтверждение.
    return {"status": "ok", "key": key, "remembered_value": value}

# Создаем портал, через который можно "вспомнить" что-то.
@app.get("/recall/{key}")
def recall_value(key: str):
    # Спрашиваем у Хранителя: "Что ты помнишь под этим ключом?".
    value = r.get(key)
    # Если он ничего не помнит (возвращает None), сообщаем об этом.
    if value is None:
        return {"status": "not_found", "key": key}
    # Иначе, возвращаем найденное воспоминание.
    return {"status": "found", "key": key, "recalled_value": value}