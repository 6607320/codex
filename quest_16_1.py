# === quest_16_1.py ===
# Квест: 16.1 - Настройка "Хронографа"
# Цель: Установить и запустить MLflow - наш "Лабораторный Журнал"
# для отслеживания экспериментов. Мы сделаем первую, простейшую запись,
# чтобы понять основные заклинания: log_param, log_metric, log_artifact.

# --- Акт 1: Подготовка Гримуаров ---
# Призываем наш новый гримуар "Хронограф".
import mlflow
# Призываем помощника 'os' для работы с путями.
import os

# --- Акт 2: Настройка "Лабораторного Журнала" ---

# mlflow.set_tracking_uri(...) - это заклинание, которое говорит MLflow,
# ГДЕ именно хранить свой "журнал". Мы указываем ему создать папку 'mlruns'
# в текущей директории. `file://` - протокол для локального хранения.
# `os.path.abspath` - получает полный, абсолютный путь.
# Примечание: Этот шаг необязателен, MLflow по умолчанию и так создаст 'mlruns' здесь.
# mlflow.set_tracking_uri("file://" + os.path.abspath("mlruns"))

# Каждый проект в MLflow - это "Эксперимент". Это как отдельная книга в библиотеке.
# mlflow.set_experiment() - это заклинание, которое "выбирает книгу для записи"
# или создает новую, если ее еще нет.
experiment_name = "Первый Свиток Хроник"
mlflow.set_experiment(experiment_name)

# Сообщаем Магу о том, что настройка завершена.
print(f"Магический 'Хронограф' (MLflow) настроен.")
print(f"Все записи будут сохраняться в эксперимент: '{experiment_name}'")

# --- Акт 3: Ритуал "Первой Записи" ---

# `with mlflow.start_run(...)` - это главное заклинание для начала записи.
# Оно говорит: "Я начинаю новый ритуал! Открой новую, чистую страницу в журнале".
# `run_name` - это имя, которое мы даем этой конкретной "странице" (запуску).
# `with` - конструкция, которая гарантирует, что когда ритуал закончится (код выйдет из этого блока),
# страница будет автоматически "закрыта и сохранена".
with mlflow.start_run(run_name="Пробный Ритуал"):
    # Сообщаем о начале записи.
    print("\nНачинаю 'Пробный Ритуал' и делаю записи в журнал...")
    
    # --- Запись "Ингредиентов" (Гиперпараметров) ---
    # `mlflow.log_param()` - заклинание, которое записывает на страницу ПАРАМЕТР.
    # Параметр - это "настройка" твоего ритуала, которую ТЫ задаешь (например, скорость обучения).
    # Первый аргумент - имя параметра (строка), второй - его значение.
    mlflow.log_param("скорость_обучения", 0.01)
    mlflow.log_param("количество_эпох", 100)
    
    # --- Запись "Результатов" (Метрик) ---
    # `mlflow.log_metric()` - заклинание, которое записывает на страницу МЕТРИКУ.
    # Метрика - это "измерение", результат работы твоего ритуала (например, ошибка).
    # Метрики можно записывать много раз за один ритуал, создавая график.
    # Первый аргумент - имя метрики, второй - ее значение, третий (необязательный) - "шаг" (например, номер эпохи).
    mlflow.log_metric("ошибка", 0.3441, step=10)
    mlflow.log_metric("ошибка", 0.0483, step=100)

    # --- Сохранение "Артефактов" ---
    # Артефакт - это любой файл, который ты хочешь прикрепить к своей "странице" журнала.
    # Сначала мы создаем сам файл.
    with open("заклинание.txt", "w") as f:
        f.write("Это было заклинание 'Перегонки Знаний'.")
    
    # `mlflow.log_artifact()` - приказывает "Хронографу" взять файл с диска
    # и скопировать его внутрь "страницы" журнала.
    # `artifact_path="свитки"` - говорит, что внутри страницы артефакт
    # нужно положить в подпапку "свитки".
    mlflow.log_artifact("заклинание.txt", artifact_path="свитки")
    
    # Сообщаем об успехе.
    print("Все записи сделаны, артефакты сохранены.")

# --- Акт 4: Инструкция по Пробуждению "Магического Зеркала" ---

# Сообщаем, что ритуал записи завершен.
print("\nРитуал завершен!")
# Даем Магу-Техноманту точную инструкцию, как посмотреть на результаты своей работы.
print("\nЧтобы увидеть свои хроники, останови этот скрипт (если он не остановился сам),")
print("и в ЭТОМ ЖЕ терминале произнеси заклинание:")
# `mlflow ui` - это отдельная команда для терминала, которая запускает веб-сервер.
print("mlflow ui")
# Объясняем, что делать дальше.
print("\nЗатем открой в браузере адрес, который он тебе покажет (обычно http://127.0.0.1:5000).")