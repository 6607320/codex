# Имя нашего Великого Ритуала. Оно будет сиять в Зале Летописей GitHub Actions,
# ясно указывая на его священное предназначение: создание Голема и отправка его в Хранилище Артефактов (GAR).
name: Build and Push to GAR (Final Canon)

# "Заклинание Пробуждения". Здесь мы описываем условия, при которых Ритуал оживает.
on:
  # Тип события: Ритуал пробуждается, когда в Летопись вносятся новые знания (совершается 'push').
  push:
    # Уточнение №1: Пробуждение произойдет, только если изменения внесены в главную, каноническую ветвь 'main'.
    branches: [main]
# Уточнение №2 ("Избирательное Око"): Ритуал мудр и не тратит энергию зря.
    # Он сработает, только если изменения коснулись чертежей или материалов
    # внутри папки этого Квеста (32.2).
    paths:
      - 'Part_4_Engineering/Scroll_32/Quest_1/**'

# "Наделение Силой". Прежде чем наш временный дух-исполнитель (runner) начнет ритуал,
# мы должны даровать ему определенные магические права.
permissions:
  # Право на Чтение Летописи: Дух должен иметь возможность читать наш код, чтобы материализовать его на Алтаре.
  contents: 'read'
  # Право на Создание Магического Паспорта: КЛЮЧЕВОЕ РАЗРЕШЕНИЕ! Оно позволяет духу создать временный,
  # но абсолютно подлинный идентификационный токен (OIDC JWT). Этот "паспорт" — основа для Пакта Доверия
  # с Небесной Кузницей (Workload Identity Federation).
  id-token: 'write'

# "Скрижаль Заданий". Здесь перечислены великие дела, которые должны быть исполнены.
jobs:
  # Уникальное имя нашего единственного, но сложного задания.
  build-and-push:
    # "Алтарь для Ритуала": Мы выбираем надежный и знакомый мир 'ubuntu-latest' для проведения ритуала.
    runs-on: ubuntu-latest
    # "Шаги Ритуала": Точная и нерушимая последовательность действий.
    steps:
      # Имя первого шага, для ясности в логах.
      - name: Checkout Repository
        # "Призыв Летописи на Алтарь": Мы используем готовое заклинание 'actions/checkout@v4',
        # чтобы создать точную копию нашего кода в ритуальном пространстве.
        uses: actions/checkout@v4

      # Имя второго, самого магического шага.
      - name: Authenticate to Google Cloud
        # Мы даем этому шагу уникальное имя 'auth'. Это позволит нам в дальнейшем обращаться
        # к результатам его работы (например, к полученным ключам).
        id: auth
        # "Ритуал Пакта Доверия": Мы призываем могущественную сущность 'google-github-actions/auth@v2',
        # специализирующуюся на установлении доверительных связей с Небесной Кузницей.
        uses: google-github-actions/auth@v2
        # "Компоненты Заклинания": Мы передаем сущности точные инструкции.
        with:
          # Мы просим создать не просто токен, а особый "Временный Ключ Доступа" (access_token),
          # который понимает Страж Хранилища Артефактов (Docker).
          token_format: 'access_token'
          # Мы предъявляем наш "Древний Пакт" (Workload Identity Provider), адрес которого хранится
          # в тайной сокровищнице репозитория под руной 'GCP_WORKLOAD_IDENTITY_PROVIDER'.
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          # Мы указываем, какую "Маску" (Service Account) наш дух наденет в мире Google Cloud.
          # Имя этой маски также хранится в секретах под руной 'GCP_SERVICE_ACCOUNT'.
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Имя третьего, отладочного шага. Признак мудрого Мага — проверять свою магию.
      - name: DEBUG - Check Access Token
        # "Заклинание Прозрения": Мы просто выводим в консоль информацию о длине полученного Ключа Доступа.
        # Если длина больше нуля, значит, предыдущий магический ритуал прошел успешно.
        run: echo "Access token length is ${{ steps.auth.outputs.access_token_length }}"

      # Имя четвертого шага.
      - name: Login to Google Artifact Registry
        # "Открытие Врат Хранилища": Мы используем стандартное заклинание 'docker/login-action@v3'
        # для предъявления наших прав Стражу Хранилища.
        uses: docker/login-action@v3
        # "Предъявление Ключей": Мы передаем заклинанию необходимые данные.
        with:
          # Точный адрес врат нашего Хранилища Артефактов в Небесной Кузнице.
          registry: 'europe-west3-docker.pkg.dev'
          # Специальное магическое имя, которое говорит Стражу, что мы используем не простой пароль, а Ключ Доступа.
          username: 'oauth2accesstoken'
          # В качестве пароля мы передаем сам "Временный Ключ Доступа", который был создан
          # на шаге с именем 'auth'. Синтаксис `${{...}}` позволяет нам использовать результат того шага.
          password: '${{ steps.auth.outputs.access_token }}'

      # Имя пятого, кульминационного шага.
      - name: Build and push Docker image
        # "Великое Создание": Мы призываем сущность 'docker/build-push-action@v5' — Мастера-Кузнеца,
        # который выкует нашего Голема (Docker-образ) и поместит его в Хранилище.
        uses: docker/build-push-action@v5
        # "Финальные Указы для Кузнеца":
        with:
          # Указываем Кузнецу точный путь к мастерской этого Квеста, где лежат
          # чертежи (Dockerfile) и все необходимые материалы.
          context: ./Part_4_Engineering/Scroll_32/Quest_1
          # Прямой приказ: "Не только создай, но и немедленно отправь ('push: true') в Хранилище".
          push: true
          # "Наречение Именем": Мы даем нашему артефакту уникальное и полное имя. Оно состоит из:
          # [адрес_хранилища]/[id_проекта]/[имя_коллекции]/[имя_артефакта]:[уникальная_печать].
          # Уникальная печать `${{ github.sha }}` — это магическая подпись, соответствующая точной версии кода,
          # из которой был создан артефакт, что гарантирует абсолютную прослеживаемость.
          tags: 'europe-west3-docker.pkg.dev/${{ steps.auth.outputs.project_id }}/codex-artifacts/amulet:${{ github.sha }}'