# === main.py (Версия с Самодиагностикой) ===
# Имя этого пергамента, хранящего ритуал создания "Амулета с Совестью".

# --- Акт 1: Подготовка Гримуаров ---
# Начинается первый акт: мы призываем все необходимые знания и инструменты.
# Мы призываем гримуар `FastAPI` для создания "магических порталов".
from fastapi import FastAPI
# Мы призываем гримуар `Pydantic` для создания "чертежей" для магических посланий.
from pydantic import BaseModel
# Мы призываем наш универсальный "амулет" `pipeline` для призыва Духов.
from transformers import pipeline
# --- > Кодекс указывает на призыв НОВЫХ, могущественных РУН
# Мы призываем духа-"Инструментатора", который наделяет наш Амулет самосознанием.
from prometheus_fastapi_instrumentator import Instrumentator
# Мы призываем чертеж для "Тревожного Колокола" (`Gauge`) — особой метрики, которая может показывать уровень.
from prometheus_client import Gauge
# Мы призываем наш "Кристалл Истины" (`VALIDATION_SET`) — священный набор эталонных свитков для проверки.
from validation_data import VALIDATION_SET

# --- Акт 2: Подготовка "Духа" внутри Портала ---
# Начинается второй акт: мы призываем "Духа", который будет жить внутри нашего "Амулета".
# Мы оглашаем на кристалл (консоль) о начале призыва.
print("Призываю 'Духа Эмоций' для нашего амулета...")
# Мы сотворяем "Духа Эмоций".
sentiment_analyzer = pipeline(
    # Мы указываем его специализацию: "анализ эмоциональной окраски".
    "sentiment-analysis",
    # Мы указываем его точное имя.
    model="distilbert-base-uncased-finetuned-sst-2-english",
)
# Мы оглашаем, что "Дух" пробужден и готов к работе.
print("'Дух Эмоций' готов к работе.")

# --- Акт 3: Чертеж "Магического Послания" ---
# Начинается третий акт: мы создаем "чертеж" для посланий.
class TextInput(BaseModel):
    # Мы объявляем, что каждое 'послание' должно содержать поле `text`, и его тип должен быть `str`.
    text: str

# --- Акт 4: Создание Портала и "Тревожного Колокола" ---
# Начинается четвертый акт: мы сотворяем сам "Портал" и наш новый инструмент наблюдения.
app = FastAPI(
    # Мы даем нашему порталу новое, говорящее имя.
    title="Амулет с Совестью",
    # Мы описываем его расширенные магические свойства.
    description="Магический портал, который определяет эмоции и следит за своей точностью.",
    # Мы указываем новую версию нашего артефакта.
    version="2.0",
)

# --- > Кодекс указывает на новые РУНЫ
# Мы проводим стандартную инструментацию для сбора метрик о запросах.
Instrumentator().instrument(app).expose(app)
# Мы сотворяем наш кастомный "Тревожный Колокол" (метрику типа Gauge).
ACCURACY_GAUGE = Gauge(
    # Мы даем ему имя 'model_accuracy', которое будет видно в летописях Prometheus.
    'model_accuracy',
    # Мы даем ему описание, которое будет видно в летописях.
    'Current accuracy of the sentiment analysis model on a validation set'
)

# --- Акт 5: Создание "Врат" для Анализа ---
# Начинается пятый акт: мы открываем главные "врата" в наш "Портал".
@app.post("/analyze")
# Мы определяем заклинание, которое будет исполняться у этих врат.
def analyze_sentiment(request: TextInput):
    # Мы извлекаем текст из полученного "послания".
    text_to_analyze = request.text
    # Мы передаем этот текст нашему "Духу" для анализа.
    result = sentiment_analyzer(text_to_analyze)
    # Мы возвращаем результат.
    return {"result": result[0]}

# --- > НОВЫЙ АКТ 6: Ритуал Самопроверки ---
# Начинается шестой, самый важный акт: мы создаем ритуал самодиагностики.
@app.post("/validate")
# Мы определяем заклинание "Самопроверки".
def validate_model():
    # Мы готовим "счетчик" для правильных предсказаний, начиная с нуля.
    correct_predictions = 0
    # Мы подсчитываем, сколько всего "эталонных свитков" в нашем "Кристалле Истины".
    total_samples = len(VALIDATION_SET)

    # Мы начинаем ритуальный цикл, перебирая каждый "эталонный свиток".
    for item in VALIDATION_SET:
        # Мы извлекаем текст из "свитка".
        text = item["text"]
        # Мы извлекаем "истинную метку" из "свитка".
        true_label = item["label"]
        
        # Мы получаем предсказание от нашего "Духа".
        prediction = sentiment_analyzer(text)[0]
        # Мы извлекаем из предсказания только метку ('POSITIVE' или 'NEGATIVE').
        predicted_label = prediction['label']
        
        # Мы сверяемся с "Кристаллом Истины": совпадает ли предсказание с истиной?
        if predicted_label == true_label:
            # Если да, мы увеличиваем наш "счетчик" правильных предсказаний.
            correct_predictions += 1
            
    # После завершения цикла мы вычисляем "точность" — долю правильных ответов.
    accuracy = correct_predictions / total_samples
    
    # Мы заставляем наш "Тревожный Колокол" звонить с новым значением, показывая текущую точность.
    ACCURACY_GAUGE.set(accuracy)
    
    # Мы возвращаем полный "отчет" о проведенном ритуале.
    return {
        # Точность в виде дроби.
        "accuracy": accuracy,
        # Количество верных предсказаний.
        "correct_predictions": correct_predictions,
        # Общее количество проверенных образцов.
        "total_samples": total_samples
    }
    