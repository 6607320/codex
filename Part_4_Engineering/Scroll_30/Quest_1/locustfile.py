"""Квест 30.1: "Проверка на Прочность" (План Осады).

Этот пергамент — не исполняемый ритуал, а "План Осады". Его главная цель
(МАКРО-контекст) — описать поведение нашего "иллюзорного легиона" с
помощью гримуара `Locust`.

Мы создаем "чертеж" для одного "воина" (`AmuletUser`), который наследует
свои способности от `HttpUser`. Затем мы помечаем руной `@task` два его
боевых заклинания:
1.  Атака на "врата" `/analyze` (наш основной endpoint).
2.  Атака на "врата" `/validate` (наш служебный endpoint).

"Осадная машина" `Locust` будет использовать этот "План", чтобы порождать
тысячи таких "воинов" и обрушивать их на наш "Амулет", проверяя его на
прочность.
"""

# --- Акт 1: Призыв Духов Легиона ---
# Начинается первый акт: мы призываем сущности, из которых будет состоять наш легион.
# Из гримуара 'locust' мы призываем три сущности:
# `HttpUser` — чертеж для "воина", который умеет атаковать веб-порталы (HTTP).
# `task` — руна, которой мы помечаем приказ "Атаковать!".
# `between` — заклинание, определяющее случайные паузы в действиях воина.
from locust import HttpUser, task, between


# --- Акт 2: Создание Чертежа Нашего Воина ---
# Начинается второй акт: мы создаем чертеж для каждого воина в нашем легионе.
# Мы создаем наш собственный тип воина, наследуя его от `HttpUser`.
# Каждый "иллюзорный пользователь", которого создаст Locust, будет
# следовать этому чертежу.
class AmuletUser(HttpUser):
    # `wait_time` — это врожденное свойство каждого воина.
    # `between(1, 5)` приказывает ему после каждой атаки делать случайную паузу
    # от 1 до 5 секунд, чтобы симулировать поведение реального пользователя.
    wait_time = between(1, 5)

    # --- Акт 3: Приказ №1 - Атака на Врата Анализа ---
    # Начинается третий акт: мы отдаем первый боевой приказ.
    # Руна `@task` превращает этот метод в боевое заклинание.
    # Locust будет случайным образом выбирать одно из помеченных заклинаний
    # для каждого воина.
    @task
    # Мы определяем само заклинание "Атака на Врата Анализа".
    def analyze_sentiment(self):
        # `self.client` — это личное магическое оружие
        #  каждого воина для отправки HTTP-запросов.
        # `.post(...)` — это приказ нанести удар методом POST.
        self.client.post(
            # Первая часть приказа — цель. Мы атакуем врата "/analyze".
            "/analyze",
            # Вторая часть — "осадный снаряд". Мы отправляем JSON-послание с
            # текстом.
            json={"text": "This is a test sentence for the load test."},
        )

    # --- Акт 4: Приказ №2 - Атака на Врата Самопроверки ---
    # Начинается четвертый акт: мы отдаем второй боевой приказ.
    # Мы помечаем и этот метод руной `@task`, давая нашему легиону вторую цель.
    @task
    # Мы определяем заклинание "Атака на Врата Самопроверки".
    def validate_model(self):
        # Мы приказываем нанести удар методом POST по вратам "/validate".
        # Этим вратам не нужен "осадный снаряд", поэтому мы не передаем 'json'.
        self.client.post("/validate")
