# === validate_model.py (Версия 3.0: Артефакт с Хронометром) ===

# --- Акт 1: Призыв Гримуаров ---
# Мы призываем заклинание 'pipeline' из Великого Гримуара 'transformers'
# для сотворения AI-духов.
from transformers import pipeline

# Мы призываем наш "Камень Истины" (`VALIDATION_SET`), эталон для проверки
# мудрости духов.
from validation_data import VALIDATION_SET

# Мы призываем могущественного духа 'click', мастера командной строки и
# красноречия.
import click

# --- > НОВАЯ РУНА: Мы призываем сам гримуар 'torch',
#  чтобы получить доступ к его фундаментальной магии.
import torch  # noqa: F401

# --- > НОВАЯ РУНА: Из гримуара 'torch' мы призываем
#  его самое зоркое око — 'Хронометр' (profiler).
from torch import profiler


# --- Акт 2: Основной Ритуал Валидации ---
# Заклинание-декоратор от духа 'click', превращающее нашу функцию в
# команду для терминала.
@click.command()
# Декоратор, создающий настраиваемую опцию '--model-name' для нашей команды.
@click.option(
    # Имя опции, которое Мастер будет использовать в терминале.
    "--model-name",
    # Значение по умолчанию, если Мастер не укажет иное.
    default="distilbert-base-uncased-finetuned-sst-2-english",
    # Текст помощи, который 'click' покажет Мастеру по команде `--help`.
    help="Имя модели из Hugging Face Hub для проведения валидации.",
)
# Наша функция волшебным образом получает значение из опции '--model-name'
# в качестве аргумента.
def run_validation(model_name):
    """
    Загружает указанную модель, профилирует валидацию и выводит результаты.
    """
    # Используем заклинание 'secho' от 'click', чтобы объявить о начале
    # ритуала сияющим желтым цветом.
    click.secho(f"[*] Призываю духа модели: '{model_name}'...", fg="yellow")

    # Начинаем защитный ритуал 'try', чтобы поймать любую ошибку, если дух не
    # откликнется на зов.
    try:
        # Произносим заклинание 'pipeline', используя имя, переданное Мастером.
        sentiment_analyzer = pipeline("sentiment-analysis", model=model_name)
        # Если призыв успешен, объявляем об этом победным зеленым цветом.
        click.secho("[+] Дух готов к испытанию.", fg="green")
    # Если во время призыва произошла ошибка, наш защитный ритуал ловит ее.
    except Exception as e:
        # Кричим об ошибке тревожным красным цветом, объясняя, что пошло не
        # так.
        click.secho(f"[!] Ошибка призыва: {e}", fg="red")
        # Немедленно прерываем ритуал, так как без духа продолжать
        # бессмысленно.
        return

    # Готовим счетный камень для верных предсказаний, начиная с нуля.
    correct_predictions = 0
    # Узнаем, сколько всего испытаний предстоит пройти духу.
    total_samples = len(VALIDATION_SET)

    # Объявляем о начале испытаний, используя стандартное заклинание 'echo' от
    # 'click'.
    click.echo(f"[*] Начинаю испытание на {total_samples} примерах...")

    # --- > НОВЫЕ РУНЫ: Начало ритуала "Истинного Времени" < ---
    # Мы начинаем контекст Хронометра, приказывая ему начать запись всех
    # магических операций.
    with profiler.profile(
        # Указ 1: "Следи за активностью и разума (CPU), и Кристалла Маны
        # (CUDA)".
        activities=[
            profiler.ProfilerActivity.CPU,
            profiler.ProfilerActivity.CUDA,
        ],
        # Указ 2: "Записывай 'форму' магических потоков (размеры тензоров), чтобы
        # мы знали их масштаб".
        record_shapes=True,
        # Указ 3: "Записывай путь вызова каждого заклинания (стек вызовов) для
        # глубокой отладки".
        with_stack=True,
        # Мы даем нашему запущенному Хронометру имя 'prof', чтобы обращаться к
        # нему позже.
    ) as prof:
        # Мы помещаем 'горячую' часть нашего кода — само испытание — внутрь
        # области действия Хронометра.
        with click.progressbar(
            VALIDATION_SET, label="Провожу испытание..."
        ) as bar:
            # Перебираем испытания, наблюдая за красивой шкалой прогресса.
            for item in bar:
                # Извлекаем текст загадки.
                text = item["text"]
                # Извлекаем истинный ответ.
                true_label = item["label"]
                # Спрашиваем предсказание у нашего духа (эта операция теперь под
                # пристальным надзором Хронометра).
                prediction = sentiment_analyzer(text)[0]
                # Сравниваем ответ духа с истиной.
                if prediction["label"] == true_label:
                    # Если ответ верен, мы добавляем единицу на наш счетный
                    # камень.
                    correct_predictions += 1
    # Как только мы выходим из блока 'with', Хронометр автоматически
    # останавливает запись и сохраняет все данные.

    # После всех испытаний мы вычисляем итоговую точность духа в процентах.
    accuracy = (correct_predictions / total_samples) * 100

    # Объявляем о завершении ритуала победным зеленым цветом.
    click.secho("[+] Испытание завершено!", fg="green")

    # Начинаем печатать финальный отчет о точности, выделяя заголовок жирным
    # шрифтом.
    click.secho(f"\n--- Отчет о Силе Духа ---", bold=True)  # noqa: F541
    # Печатаем вычисленную точность, округляя до двух знаков после запятой.
    click.echo(f"Точность модели: {accuracy:.2f}%")
    # Печатаем количество верных ответов для полной ясности.
    click.echo(
        f"Верных предсказаний: {correct_predictions} из {total_samples}"
    )
    # Завершаем отчет еще одной жирной линией.
    click.secho(f"--------------------------", bold=True)  # noqa: F541

    # --- > НОВАЯ РУНА: Приказываем Хронометру показать нам свои записи.
    # Печатаем заголовок для нового, самого важного отчета.
    click.secho(
        (
            f"\n--- Отчет Хронометра Истинного Времени (Топ 15 CPU) ---"  # noqa: F541
        ),
        bold=True,
    )
    # Мы обращаемся к нашему Хронометру 'prof', просим его усреднить данные по
    # ключам (именам операций) и представить их в виде таблицы,
    # отсортированной по общему времени CPU, и показать только 15 самых
    # медленных.
    print(prof.key_averages().table(sort_by="cpu_time_total", row_limit=15))


# --- Акт 3: Точка Входа в Ритуал ---
# Древняя руна, которая проверяет: "Этот пергамент был запущен напрямую
# Мастером?".
if __name__ == "__main__":
    # Если да, то она запускает наш главный ритуал, который теперь является
    # могущественной 'click'-командой.
    run_validation()
