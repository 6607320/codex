# === quest_2_1.py ===
# Квест: 2.1 - Призыв "Уха Всеслышания"
# Цель: Познакомиться с работой аудио-моделей. Мы призовем "духа", способного
# распознавать речь, и проведем простой тест, чтобы убедиться, что он работает.

# --- Акт 1: Подготовка Гримуаров ---

# Снова используем наш универсальный "амулет" pipeline, который умеет работать
# не только с текстом, но и с другими стихиями.
from transformers import pipeline

# Призываем помощника 'numpy' для быстрой работы с массивами чисел.
import numpy as np

# --- Акт 2: Призыв "Уха Всеслышания" ---

# Сообщаем о начале ритуала. При первом запуске будет скачиваться модель.
print("Призываю 'Ухо Всеслышания' (Whisper-tiny)...")

# Создаем наш "амулет", но для новой задачи.
# 1. "automatic-speech-recognition" - Название задачи (ASR).
#    Мы хотим "автоматически распознавать речь".
# 2. model="openai/whisper-tiny" - Имя "духа". Whisper - одна из самых
#    могущественных моделей для распознавания речи. Мы берем ее "младшую"
#    версию 'tiny', чтобы сэкономить ману.
# 3. device_map="auto" - Умная руна, которая приказывает "амулету" самому
#    решить, как лучше использовать твой Кристалл Маны (GPU) и разум (CPU).
transcriber = pipeline(
    "automatic-speech-recognition", model="openai/whisper-tiny", device_map="auto"
)

# --- Акт 3: Создание "Магической Тишины" для Теста ---

# Чтобы провести простой тест, нам не нужен настоящий аудиофайл.
# Мы создадим его "магический" аналог - тишину.

# Создаем массив из 16000 нулей. Это имитирует 1 секунду аудио.
# Почему 16000? Потому что "Ухо" Whisper было обучено "слушать" звук
# с частотой 16000 Гц (16000 замеров в секунду).
fake_speech = np.zeros(16000)

# --- Акт 4: Ритуал Распознавания ---

# Сообщаем о следующем шаге.
print("\nДаю духу послушать тишину...")

# "Скармливаем" наш массив-тишину (fake_speech) нашему "амулету" (transcriber).
# "Амулет" сам выполнит все необходимые преобразования звука.
result = transcriber(fake_speech)

# --- Акт 5: Анализ Результата ---

# Выводим заголовок.
print("Результат расшифровки тишины:")
# Печатаем результат. Так как на входе была тишина, мы ожидаем увидеть
# пустой текст или какой-то артефакт (например, 'you'), что будет означать,
# что модель жива и пытается интерпретировать даже незнакомые ей сигналы.
print(result)
