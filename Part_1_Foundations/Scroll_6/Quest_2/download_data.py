# === download_data.py ===
# Квест: Часть Ритуала для Квеста 6.2
# Цель: ЕДИНОРАЗОВО скачать и кэшировать необходимый для обучения аудио-архив.
# Разделение загрузки и обработки на разные скрипты - это хорошая инженерная практика.
# Она позволяет не скачивать данные каждый раз при запуске основного
# скрипта обучения.

# --- Акт 1: Подготовка Гримуара ---

# Призываем заклинание load_dataset из нашего "Библиотекаря" (гримуар datasets).
# Это наш главный и единственный инструмент в этом ритуале.
from datasets import load_dataset

# --- Акт 2: Ритуал Призыва и Кэширования ---

# Выводим в консоль сообщение, чтобы Маг-Техномант знал, какой ритуал начался.
print("Начинаю ритуал предварительной загрузки данных...")

# load_dataset - это мощное заклинание, которое связывается с Великой Библиотекой (Hugging Face Hub).
# 1. "PolyAI/minds14" - Имя архива, который мы хотим призвать.
# 2. name="en-US" - Уточнение. В этом архиве есть данные на разных языках, мы просим только англо-американскую часть.
# 3. split="train" - Из всех частей архива (тренировочная, тестовая) мы просим скачать тренировочную.
#
# ВАЖНО: Мы НЕ используем streaming=True. Это означает, что мы приказываем
# гримуару скачать ВЕСЬ указанный архив (в данном случае, все 563 аудиофайла)
# и сохранить его в специальную "локальную сокровищницу" (папку кэша) на
# твоем диске.
load_dataset(
    "PolyAI/minds14", name="en-US", split="train", trust_remote_code=True
)

# --- Акт 3: Завершение ---

# Финальное сообщение, подтверждающее, что долгий процесс скачивания завершен.
# Теперь, когда данные лежат в кэше, любой другой скрипт, использующий этот же
# датасет, будет загружать его мгновенно, уже с твоего диска.
print(
    "Ритуал загрузки завершен. Все данные теперь в твоей локальной сокровищнице (кэше)."
)
