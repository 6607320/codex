"""Квест 6.1: Извлечение "эссенции голоса".

Этот пергамент открывает "Свиток Наставления Голосу" и демонстрирует магию
Transfer Learning для аудио. Его главная цель (МАКРО-контекст) — использовать
могущественного "Духа-Эмпата" `wav2vec2` не для распознавания речи, а как
"извлекатель признаков" (feature extractor).

Мы не учим Голема "слышать" с нуля. Вместо этого мы призываем предобученного
духа, который обладает сверхъестественной способностью "вслушиваться" в голос
и извлекать из него саму его "эссенцию" — богатый числовой вектор (эмбеддинг).
Этот "золотой самородок" мы затем сможем использовать для обучения наших
собственных, маленьких и быстрых классификаторов в следующем квесте.
"""

# --- Акт 1: Подготовка Гримуаров ---
# Первый акт: мы призываем все необходимые знания и инструменты для ритуала.

# Мы призываем наш главный силовой гримуар `PyTorch`, источник всей
# магической энергии.
import torch

# Мы призываем "Библиотекаря" `load_dataset` из гримуара `datasets` для
# призыва аудио-архивов.
from datasets import load_dataset

# Мы призываем двух специалистов по аудио из гримуара `transformers`:
# `Wav2Vec2FeatureExtractor`: "Настройщик Слуха", который готовит аудио к анализу.
# `Wav2Vec2Model`: Сам "Дух-Эмпат",
#  который извлекает "эссенцию" из подготовленного звука.
from transformers import Wav2Vec2FeatureExtractor, Wav2Vec2Model

# --- Акт 2: Призыв Магических Существ ---
# Второй акт: мы материализуем Духа-Эмпата и его верного помощника.

# Мы оглашаем на кристалл (консоль) о начале ритуала призыва.
print("Призываю Духа-Эмпата (Wav2Vec2) и его инструменты...")
# Мы призываем "Настройщика Слуха", обученного специально для модели
# 'wav2vec2-base'.
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained("facebook/wav2vec2-base")
# Мы призываем самого "Духа-Эмпата". 'base' — это его средняя по размеру и
# силе версия.
model = Wav2Vec2Model.from_pretrained("facebook/wav2vec2-base")
# Мы немедленно отправляем "Духа" на Кристалл Маны (GPU) для быстрой работы.
model.to("cuda")

# --- Акт 3: Призыв Аудио-Послания ---
# Третий акт: мы призываем артефакт — аудиозапись, которую будем анализировать.

# Мы оглашаем на кристалл о начале призыва нашего аудио-артефакта.
print("\nПризываю аудио-послание из архива 'librispeech_asr'...")
# Мы используем наш надежный, проверенный в битвах архив.
# Мы знаем, что для него нужна версия `datasets<3.0.0` и `trust_remote_code=True`.
# Мы также знаем, что правильное имя "тома" — 'test' для тестовых данных.
dataset = load_dataset(
    "librispeech_asr",
    "clean",
    split="test",
    streaming=True,
    trust_remote_code=True,
)
# Мы извлекаем из потокового "портала" самый первый попавшийся образец.
sample = next(iter(dataset))

# Мы извлекаем всю аудио-информацию из образца в одну переменную.
audio_input = sample["audio"]
# Мы разбираем ее на "сырые вибрации" (числовой массив NumPy).
audio_data = audio_input["array"]
# Мы также извлекаем "паспорт" звука (частоту дискретизации).
sampling_rate = audio_input["sampling_rate"]
# Мы оглашаем, что артефакт успешно призван и готов к анализу.
print("Послание призвано!")

# --- Акт 4: Ритуал Извлечения Эссенции ---
# Четвертый, кульминационный акт: мы просим Духа "вслушаться" в звук и
# извлечь его суть.

# Мы оглашаем на кристалл о начале самого важного этапа ритуала.
print("\nДух-Эмпат вслушивается в голос...")
# Мы передаем сырой звук и его паспорт "Настройщику Слуха".
# Он приводит звук к нужной частоте (16кГц), нормализует громкость
# и упаковывает в Тензор PyTorch (`'pt'`).
inputs = feature_extractor(audio_data, sampling_rate=sampling_rate, return_tensors="pt")
# Мы отправляем подготовленный и упакованный звук на Кристалл Маны (GPU).
inputs = inputs.to("cuda")

# Мы используем защитное заклинание `torch.no_grad()` для экономии маны
# (VRAM/вычислений).
with torch.no_grad():
    # Мы "скармливаем" подготовленный звук "Духу-Эмпату", ожидая его ответа.
    outputs = model(**inputs)

# Из сложного ответа `outputs` мы извлекаем его самую ценную часть —
# `last_hidden_state`. Это и есть многомерная "аура", или "эссенция" голоса.
voice_essence = outputs.last_hidden_state
# Мы оглашаем, что ритуал извлечения успешно завершен.
print("Эссенция голоса успешно извлечена!")

# --- Акт 5: Анализ "Ауры" ---
# Финальный акт: мы изучаем полученную "эссенцию", чтобы понять ее структуру.

# Мы оглашаем на кристалл, что начинаем анализ полученного артефакта.
print("\nАнализируем полученную 'ауру' (эмбеддинг):")
# Заклинание `.shape` показывает размеры тензора, его "форму".
# Мы ожидаем 3 измерения: (батч, длина_последовательности, размер_эссенции).
# Например: (1, 175, 768), где 175 — это "мгновения" звука.
print(f"  Форма ауры: {voice_essence.shape}")

# Для классификации всего аудио нам нужен один "отпечаток",
#  а не последовательность из 175.
# Заклинание `.mean(dim=1)` "схлопывает" измерение времени (dim=1),
# усредняя все "мгновения".
aggregated_essence = voice_essence.mean(dim=1)
# Теперь форма тензора должна быть (батч, размер_эссенции), например (1, 768).
# Это и есть наш "золотой самородок" — финальный эмбеддинг, готовый к
# использованию.
print(f"  Форма единого отпечатка: {aggregated_essence.shape}")
