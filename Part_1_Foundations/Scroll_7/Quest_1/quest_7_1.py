# === quest_7_1.py ===
# Имя этого пергамента, знаменующего начало Саги о "Стилевой Печати".
# Квест: 7.1 - Подготовка палитры (через сотворение)
# Каноническое имя Квеста, как оно записано в Великом Кодексе.
# Цель: Создать свой собственный, чистый и стилистически единый набор
# изображений для обучения. Мы используем Духа-Демиурга, чтобы он сам
# нарисовал нам "учебник".
# Священная цель нашего ритуала и описание метода ее достижения.

# --- Акт 1: Подготовка Гримуаров ---
# Первый акт: мы призываем все необходимые знания и инструменты для ритуала.

# Мы призываем "Духа-Архивариуса" (`os`), который знает всё о файлах и
# папках в нашей системе.
import os

# Мы призываем наш главный силовой гримуар `PyTorch`, источник всей
# магической энергии.
import torch

# Мы призываем чертеж `DiffusionPipeline` из гримуара `diffusers` —
# сложнейшего механизма для магии творения.
from diffusers import DiffusionPipeline

# Мы призываем наш "индикатор прогресса" `tqdm`, чтобы видеть, как идет ритуал.
from tqdm import tqdm

# --- Акт 2: Подготовка "Сцены" ---
# Второй акт: мы готовим место, куда будем складывать сотворенные артефакты.

# Мы даем имя папке, куда будем складывать наши сотворенные "краски"-картины.
palette_folder = "generated_palette"
# Мы произносим заклинание `makedirs`, чтобы создать эту папку, если ее
# еще нет.
os.makedirs(palette_folder, exist_ok=True)
# Мы устанавливаем, сколько "учебных" картин мы хотим сотворить.
num_images = 15

# Мы оглашаем на кристалл (консоль) о начале ритуала призыва.
print("Призываю Духа-Демиурга для создания нашей собственной палитры...")

# --- Акт 3: Призыв Демиурга в Режиме Экономии ---
# Третий акт: мы призываем самого Духа-Творца, используя руны экономии маны.

# Мы призываем конвейер, используя уже знакомые нам руны экономии.
# Модель будет загружена из локального кэша, так как мы ее уже скачивали.
pipe = DiffusionPipeline.from_pretrained(
    # Мы называем точное имя Духа, которого хотим призвать.
    "CompVis/stable-diffusion-v1-4",
    # Мы приказываем загружать "мысли" (веса) модели в "легком" 16-битном
    # формате.
    torch_dtype=torch.float16,
)
# Мы активируем ритуал "Призрачного Перемещения" для максимальной экономии
# VRAM.
pipe.enable_model_cpu_offload()

# --- Акт 4: Ритуал "Самосотворения" ---
# Четвертый, кульминационный акт: мы запускаем процесс творения наших
# учебных материалов.

# Мы создаем текстовое заклинание, которое описывает стиль, который мы хотим получить.
# Этот же стиль мы будем использовать для обучения нашей "Стилевой Печати".
style_prompt = "a beautiful painting of a landscape, trending on artstation, masterpiece, vibrant colors"

# Мы оглашаем на кристалл о начале долгого процесса творения.
print(f"\nНачинаю творить {num_images} картин в стиле: '{style_prompt}'")

# Мы запускаем ритуальный цикл, который повторится 'num_images' (15) раз.
# Мы "оборачиваем" его в `tqdm`, чтобы видеть общий прогресс в виде индикатора.
for i in tqdm(range(num_images), desc="Сотворение палитры"):
    # Мы используем "защитное заклинание" try...except.
    # Если во время генерации одной из картин произойдет сбой,
    # ритуал не прервется, а просто сообщит об ошибке и перейдет к следующей.
    try:
        # Мы запускаем генерацию, передавая Духу наше "стилевое" заклинание.
        image = pipe(style_prompt).images[0]

        # Мы создаем уникальное имя для каждой сотворенной картины.
        save_path = os.path.join(palette_folder, f"style_image_{i}.png")
        # Мы сохраняем сотворенный артефакт в виде файла на диске.
        image.save(save_path)
    # Если внутри блока `try` произойдет любая ошибка (`Exception`)...
    except Exception as e:
        # ...мы выводим на кристалл сообщение об этой ошибке.
        print(f"\nНе удалось сотворить картину #{i}. Ошибка: {e}")

# --- Акт 5: Завершение ---
# Финальный акт: мы оглашаем об успешном завершении ритуала.

# Мы сообщаем Магу-Техноманту, что ритуал завершен и "палитра" готова.
print(
    f"\nРитуал завершен! Палитра из {num_images} сотворенных картин готова в папке '{palette_folder}'."
)
