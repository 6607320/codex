# === quest_4_2.py ===
# Квест: 4.2 - Обнаружение движения
# Цель: Освоить базовую технику видеоаналитики - вычитание кадров.
# Этот простой, но мощный принцип позволяет "увидеть" изменения
# между двумя моментами времени.

# --- Акт 1: Подготовка Гримуаров ---

# Призываем "Набор Кинематографиста" (OpenCV).
import cv2

# Призываем помощника 'numpy' для работы с массивами (образами).

# --- Акт 2: Загрузка "Карт Времени" ---

# Сообщаем о начале ритуала.
print("Загружаю две карты из колоды: кадр 1 и кадр 2...")
# Используем заклинание imread для загрузки двух последовательных кадров,
# которые мы создали на прошлом квесте.
frame1 = cv2.imread("frames/frame_1.jpg")
frame2 = cv2.imread("frames/frame_2.jpg")

# --- Акт 3: Ритуал "Магического Вычитания" ---

# Сообщаем о начале анализа.
print("Начинаю ритуал 'Вычитания образов' для поиска различий...")
# cv2.absdiff(...) - это заклинание "абсолютной разницы".
# Оно берет два образа и вычисляет разницу в яркости для каждого пикселя.
# Результат - новый образ, где черные пиксели означают "нет разницы",
# а светлые - "была разница".
difference = cv2.absdiff(frame1, frame2)

# --- Акт 4: Усиление и Очистка "Карты Движения" ---

# Шаг 4.1: Обесцвечивание "Карты Различий"
# cv2.cvtColor - заклинание для конвертации цветовых пространств.
# Мы превращаем цветное изображение разницы (BGR) в черно-белое (GRAY).
# Теперь каждый пиксель - это одно число (яркость), а не три.
gray_difference = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)

# Шаг 4.2: Пороговая Фильтрация ("Заклинание Контраста")
# cv2.threshold - это фильтр, который делает изображение предельно контрастным.
# 1. gray_difference - Что фильтруем.
# 2. 25 - Пороговое значение.
# 3. 255 - Максимальное значение (чисто белый цвет).
# 4. cv2.THRESH_BINARY - Тип фильтра ("или/или").
# Все пиксели с яркостью ниже 25 станут 0 (черными).
# Все пиксели с яркостью выше 25 станут 255 (белыми).
# Это убирает незначительный шум и оставляет только явное движение.
# "_" - мы игнорируем первый возвращаемый параметр, нам нужна только маска.
_, motion_mask = cv2.threshold(gray_difference, 25, 255, cv2.THRESH_BINARY)
print("Карта движения создана.")

# --- Акт 5: Сохранение Артефакта ---

# cv2.imwrite - сохраняем нашу финальную, черно-белую "маску движения".
cv2.imwrite("motion_detected.png", motion_mask)
print("\nМагия свершилась! 'Карта движения' сохранена в файл 'motion_detected.png'")
# Важное примечание для ученика, объясняющее ожидаемый результат.
print(
    "(Примечание: так как наши кадры были одинаковы, карта движения будет черной. Это УСПЕХ!)"
)
