# === quest_3_3.py ===
# Имя этого пергамента, которое будет занесено в священную Летопись Кодекса.
# Квест: 3.3 - Усиление Иллюзий
# Каноническое имя Квеста, описывающее его суть.
# Цель: Освоить аугментацию - технику программного изменения изображений.
# Здесь изложена главная цель нашего ритуала.
# Это фундаментальный навык для подготовки "учебников" для моделей
# компьютерного зрения, позволяющий из одного образа создать множество вариаций.
# А здесь — объяснение, почему эта магия так важна для Техноманта.

# --- Акт 1: Подготовка Гримуаров ---
# Мы начинаем первый магический акт: призыв знаний из великих библиотек.

# Мы призываем из могущественного гримуара `torchvision` его раздел `transforms`.
# `as T` — это краткое заклинание, создающее псевдоним `T`, чтобы не писать длинное имя каждый раз.
import torchvision.transforms as T

# Мы призываем из гримуара `Pillow` (PIL) заклинание `Image`,
# которое позволяет нам работать с файлами изображений, вскрывать их и сохранять.
from PIL import Image

# --- Акт 2: Загрузка Артефакта ---
# Второй акт: мы призываем наш артефакт, созданный в предыдущем ритуале.

# Мы записываем в переменную путь к нашему артефакту, чтобы заклинания
# знали, с чем работать.
original_artifact_path = "magical_cat.png"
# Мы оглашаем на кристалл (консоль), какой именно артефакт мы призываем.
print(f"Загружаю наш артефакт: {original_artifact_path}")

# Мы используем заклинание `Image.open()` для вскрытия файла и загрузки
# его сущности (пикселей) в память, в переменную `original_image`.
original_image = Image.open(original_artifact_path)

# --- Акт 3: Создание Конвейера "Магических Линз" ---
# Третий, самый важный акт: мы создаем последовательность магических трансформаций.

# Мы оглашаем на кристалл о начале сотворения нашего конвейера.
print("\nСоздаю конвейер магических линз (трансформаций)...")

# Заклинание `T.Compose` создает "конвейер", который будет последовательно
# применять к образу все трансформации, перечисленные внутри списка.
transform_pipeline = T.Compose(
    [
        # Первая "линза" в нашем конвейере: `T.Resize`.
        # Она принудительно изменяет размер изображения до 256x256 пикселей.
        T.Resize((256, 256)),
        # Вторая "линза": `T.RandomHorizontalFlip`.
        # Она отражает изображение по горизонтали. `Random` означает "случайно".
        # `p=1.0` — вероятность срабатывания 100%. Мы приказываем отражать этот образ всегда.
        T.RandomHorizontalFlip(p=1.0),
        # Третья "линза": `T.RandomRotation`.
        # Она поворачивает изображение на случайный угол в диапазоне от -45 до +45 градусов.
        T.RandomRotation(degrees=45),
        # Четвертая "линза": `T.ColorJitter`.
        # Она "искажает" цвета, случайным образом меняя яркость (`brightness`) и оттенок (`hue`).
        T.ColorJitter(brightness=0.5, hue=0.3),
    ]
)

# --- Акт 4: Применение Магии ---
# Четвертый, кульминационный акт: мы пропускаем наш артефакт через сотворенный конвейер.

# Мы оглашаем на кристалл о начале магического действа.
print("Применяю трансформации к нашему артефакту...")

# Это само магическое действие! Мы "пропускаем" наш исходный образ
# `original_image` через созданный конвейер `transform_pipeline`.
# Результатом является новый, измененный образ, который мы сохраняем в
# `transformed_image`.
transformed_image = transform_pipeline(original_image)

# --- Акт 5: Сохранение Нового Артефакта ---
# Финальный акт: мы материализуем измененный образ, чтобы он не развеялся.

# Мы используем метод `.save()` нашего нового образа, чтобы материализовать его
# в виде файла на диске с новым именем.
transformed_image.save("transformed_cat.png")
# Мы оглашаем на кристалл, что ритуал успешно завершен, и новый артефакт сохранен.
print("\nМагия трансформации свершилась! Новый образ сохранен в 'transformed_cat.png'")
