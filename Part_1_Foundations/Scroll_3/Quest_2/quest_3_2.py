"""Квест 3.2: Ритуал "Стабильного Сновидения".

Этот пергамент демонстрирует переход от анализа к чистому творению. Его
главная цель (МАКРО-контекст) — призвать "Духа-Демиурга" `Stable Diffusion`
и сотворить с его помощью новый, уникальный образ из текстового заклинания.

Этот ритуал очень требователен к "мане" (VRAM). Поэтому ключевой частью
квеста является освоение двух могущественных техник оптимизации, которые
делают генерацию возможной на скромном Кристалле Маны в 4 ГБ:
1. `torch_dtype=torch.float16` (вычисления в половинной точности).
2. `enable_model_cpu_offload()` ("Призрачное Перемещение" частей модели).

Этот квест доказывает, что даже самые могущественные заклинания можно
адаптировать под ограниченные ресурсы, если понимать суть инженерной магии.
"""

# --- Акт 1: Подготовка Гримуаров ---
# Первый акт: мы призываем гримуары, содержащие необходимые нам знания.

# Призываем наш главный силовой гримуар `PyTorch`, источник всей
# магической энергии.
import torch

# Из специализированного гримуара `diffusers` мы призываем чертеж `DiffusionPipeline` —
# сложнейшего механизма, управляющего всем процессом творения.
from diffusers import DiffusionPipeline

# --- Акт 2: Призыв Духа-Демиурга в Режиме Экономии ---
# Второй акт: мы призываем самого Духа-Творца, используя руны экономии маны.

# Оглашаем начало ритуала. Предупреждаем Мага, что призыв потребует
# времени и места в хранилище.
print("Призываю Духа-Демиурга в режиме экономии...")

# Начинается само заклинание призыва Духа-Демиурга (всего конвейера творения).
# 1. "CompVis/stable-diffusion-v1-4" - Первая руна:
#  мы называем точное имя Духа, которого хотим призвать.
# 2. torch_dtype=torch.float16 - Вторая, КЛЮЧЕВАЯ руна экономии: мы приказываем
#    загружать "мысли" (веса) модели в формате `float16` (половинной точности)
#    вместо стандартных `float32`. Это сокращает потребление VRAM почти вдвое!
pipe = DiffusionPipeline.from_pretrained(
    "CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16
)

# --- Акт 3: Активация Ритуала "Призрачного Перемещения" ---
# Третий акт: мы активируем нашу самую мощную технику экономии маны.

# Оглашаем на кристалл активацию особого, жизненно важного ритуала.
print("\nАктивирую ритуал 'Призрачного Перемещения' (CPU Offloading)...")
# Великая руна `enable_model_cpu_offload()`:
#  мы приказываем не держать всего гигантского Духа
# в драгоценной, быстрой памяти Кристалла Маны (GPU VRAM).
#  Только активная часть Духа будет
# находиться на GPU, а остальные его части будут смиренно ждать в обычной,
#  медленной памяти (CPU RAM).
# Это замедляет процесс творения, но делает его ВООБЩЕ ВОЗМОЖНЫМ на нашем
# Кристалле в 4ГБ.
pipe.enable_model_cpu_offload()

# --- Акт 4: Ритуал Творения ---
# Четвертый, кульминационный акт: мы направляем волю Духа и наблюдаем за
# творением.

# Мы создаем текстовое заклинание (промпт), которое описывает образ, что
# мы желаем сотворить.
prompt = "a magical cat with glowing paws, hyperrealistic"
# Мы оглашаем наше заклинание, чтобы и мы, и Дух знали нашу волю.
print(f"\nШепчу Духу заклинание: '{prompt}'")
# Сообщаем, что самый таинственный этап — сотворение образа из
# первозданного хаоса (шума) — начался.
print("Дух начинает творить из хаоса...")

# Главное магическое действие: мы передаем `промпт` конвейеру `pipe`.
# Внутри происходит чудо: текст превращается в числа, создается случайный шум,
# и Дух итеративно (по умолчанию 50 раз) "очищает" этот шум,
#  руководствуясь нашим заклинанием,
# пока не проявится образ. `.images[0]` — результат это список образов, из
# которого мы берем первый.
image = pipe(prompt).images[0]

# --- Акт 5: Сохранение Артефакта ---
# Финальный акт: мы материализуем сотворенный образ, чтобы он не развеялся.

# Заклинание `.save()` из гримуара Pillow превращает эфемерный образ из памяти
# в материальный артефакт — файл `magical_cat.png` на нашем диске.
image.save("magical_cat.png")
# Мы оглашаем на кристалл, что ритуал успешно завершен, и артефакт сохранен.
print("\nМагия свершилась! Образ сохранен в 'magical_cat.png'")
