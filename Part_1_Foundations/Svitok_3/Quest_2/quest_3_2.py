# === quest_3_2.py ===
# Квест: 3.2 - Ритуал "Стабильного Сновидения"
# Цель: Использовать магию генерации (синтеза) для создания нового изображения
# из текстового описания с помощью модели Stable Diffusion.
# Этот ритуал очень требователен к "мане" (VRAM), поэтому мы используем
# продвинутые техники оптимизации.

# --- Акт 1: Подготовка Гримуаров ---

# Призываем наш силовой гримуар "PyTorch".
import torch

# Призываем из гримуара "diffusers" чертеж "Диффузионного Конвейера".
# Это сложный механизм, управляющий всем процессом творения.
from diffusers import DiffusionPipeline

# --- Акт 2: Призыв Духа-Демиурга в Режиме Экономии ---

# Сообщаем о начале ритуала. Загрузка будет долгой и займет ~4ГБ на диске.
print("Призываю Духа-Демиурга в режиме экономии...")

# DiffusionPipeline.from_pretrained - это заклинание призыва всего конвейера.
# 1. "CompVis/stable-diffusion-v1-4" - Имя "духа". Это стабильная и популярная версия 1.4.
# 2. torch_dtype=torch.float16 - Ключевая руна экономии! Мы приказываем
#    загрузить все "мысли" (веса) модели в формате 16-битных чисел (float16)
#    вместо стандартных 32-битных. Это уменьшает потребление VRAM почти вдвое!
pipe = DiffusionPipeline.from_pretrained(
    "CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16
)

# --- Акт 3: Активация Ритуала "Призрачного Перемещения" ---

# Сообщаем об активации нашего главного трюка.
print("\nАктивирую ритуал 'Призрачного Перемещения' (CPU Offloading)...")
# pipe.enable_model_cpu_offload() - это самая мощная руна экономии.
# Она приказывает конвейеру не держать всего гигантского "духа" в быстрой
# памяти Кристалла Маны (GPU VRAM) постоянно. Вместо этого, он будет держать
# на Кристалле только ту часть, с которой работает прямо сейчас (например, Переводчика текста),
# а остальные части будут ждать в обычной, медленной памяти (CPU RAM).
# Это замедляет генерацию, но позволяет ритуалу работать даже на 4ГБ VRAM.
pipe.enable_model_cpu_offload()

# --- Акт 4: Ритуал Творения ---

# Создаем текстовое заклинание (промпт), описывающее нашу волю.
prompt = "a magical cat with glowing paws, hyperrealistic"
print(f"\nШепчу Духу заклинание: '{prompt}'")
print("Дух начинает творить из хаоса...")

# Запускаем конвейер, передавая ему наш промпт.
# pipe(prompt) - это само магическое действие. Конвейер сам выполнит все шаги:
# 1. Переведет промпт в "числовые руны".
# 2. Создаст случайный "шум".
# 3. Итеративно (50 раз по умолчанию) будет "очищать" шум, руководствуясь рунами промпта.
# 4. Превратит финальный "слепок" в изображение.
# .images[0] - Результат работы - это объект, содержащий список изображений.
# Мы берем первое (и единственное) из них.
image = pipe(prompt).images[0]

# --- Акт 5: Сохранение Артефакта ---

# .save() - это заклинание из гримуара Pillow (который используют diffusers),
# которое материализует наш сотворенный образ в виде файла на диске.
image.save("magical_cat.png")
print("\nМагия свершилась! Образ сохранен в 'magical_cat.png'")
