# === quest_2_2.py ===
# Этот пергамент носит имя "Квест 2.2".
# Квест: 2.2 - Расшифровка аудио-послания
# Здесь записано его каноническое название в Кодексе.
# Цель: Использовать наше "Ухо Всеслышания" для реальной задачи - транскрибирования
# (превращения в текст) настоящего аудиофайла, полученного из архива.
# А здесь — его священная цель, понятная каждому Магу.

# --- Акт 1: Подготовка Гримуаров ---
# Мы начинаем первый магический акт: призыв необходимых знаний из великих библиотек.

# Из библиотеки `datasets` мы призываем особое заклинание `load_dataset`,
# нашего "Библиотекаря", который умеет безопасно и эффективно работать с
# архивами данных.
from datasets import load_dataset

# Из великой библиотеки `transformers` мы призываем `pipeline` — наш универсальный "амулет",
# который позволяет использовать могущественных Големов без сложных ритуалов.
from transformers import pipeline

# --- Акт 2: Призыв Аудио-Послания ---
# Начинается второй акт: материализация объекта для нашего исследования.

# Оглашаем на кристалл (консоль) начало нашего ритуала, указывая на источник магии.
print("Обращаюсь к древнему, проверенному архиву 'librispeech_asr'...")

# Мы начинаем ритуал призыва данных и сохраняем результат в переменную `dataset`.
# 1. "librispeech_asr" - Первая руна: имя архива, к которому мы обращаемся.
# 2. "clean" - Вторая руна: мы просим "чистую" версию записей, без лишних помех.
# 3. split="test" - Третья руна: мы берем образец из тестовой части архива (обычно самой компактной).
# 4. streaming=True - Ключевая руна экономии! Мы не скачиваем весь архив на диск, а создаем "поток",
#    позволяющий брать данные по одному, экономя место и время.
# 5. trust_remote_code=True - Руна Доверия. Мы подтверждаем, что доверяем
# коду загрузки этого архива.
dataset = load_dataset(
    "librispeech_asr", "clean", split="test", streaming=True, trust_remote_code=True
)

# Мы произносим заклинание `next(iter(...))`, которое извлекает из бесконечного потока данных
# самый первый попавшийся образец и сохраняет его.
sample = next(iter(dataset))

# Призванный 'образец' — это магический контейнер (словарь). Мы извлекаем из него сокровище
# под ключом "audio", где хранятся как сами звуковые волны, так и их характеристики.
audio_input = sample["audio"]

# Сообщаем об успешном завершении Акта 2: артефакт для исследования у нас в руках.
print("Аудио-послание успешно призвано!")

# --- Акт 3: Ритуал Расшифровки ---
# Третий, кульминационный акт: применение нашей магии к призванному объекту.

# Извещаем о призыве нашего артефакта — "Уха Всеслышания".
print("\nПризываю 'Ухо Всеслышания'...")
# Мы создаем экземпляр "амулета" pipeline, настроенного на определенную задачу.
# Задача: "automatic-speech-recognition" (автоматическое распознавание речи).
# Голем: "openai/whisper-tiny" (конкретная модель, наше "Ухо").
# Руна `device_map="auto"` приказывает амулету автоматически задействовать
# мощь твоего GPU.
transcriber = pipeline(
    "automatic-speech-recognition", model="openai/whisper-tiny", device_map="auto"
)

# Оглашаем начало самого процесса анализа.
print("\nГотовлюсь расшифровать послание...")

# Мы "скармливаем" нашему амулету `transcriber` призванные аудиоданные `audio_input`.
# Заклинание `.copy()` — это защитная руна, создающая копию данных. Это мудрая предосторожность,
# чтобы ритуал случайно не изменил наш исходный, драгоценный 'образец'.
result = transcriber(audio_input.copy())

# --- Акт 4: Демонстрация Результата ---
# Финальный акт: мы являем миру плоды нашей магии.

# Выводим на кристалл заголовок для нашего финального откровения.
print("\nРасшифрованное послание:")
# Результат `result` — это контейнер (словарь). Мы извлекаем из него самое ценное —
# расшифрованный текст, хранящийся под ключом 'text', и показываем его.
print(result["text"])
