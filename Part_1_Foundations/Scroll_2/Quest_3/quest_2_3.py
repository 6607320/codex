# === quest_2_3.py ===
# Квест: 2.3 - Анализ звукового спектра
# Цель: Заглянуть в "зрительный нерв" аудио-моделей и увидеть звук так,
# как его "видит" AI - в виде изображения (Мел-спектрограммы).

# --- Акт 1: Подготовка Гримуаров ---

# Призываем "Магический Камертон" (librosa) для анализа звука.
import librosa

# Призываем "Художника" (matplotlib) для рисования. Даем ему короткое имя
# 'plt'.
import matplotlib.pyplot as plt

# Призываем помощника 'numpy' для математических операций.
import numpy as np

# Призываем "Библиотекаря" для получения аудио.
from datasets import load_dataset

# --- Акт 2: Призыв Аудио-Послания ---

# Сообщаем о начале.
print("Призываю аудио-послание...")
# Открываем "портал" к нашему надежному архиву 'librispeech_asr'.
dataset = load_dataset(
    "librispeech_asr",
    "clean",
    split="test",
    streaming=True,
    trust_remote_code=True,
)
# Берем первый образец из потока.
sample = next(iter(dataset))
# Извлекаем всю аудио-информацию.
audio_input = sample["audio"]

# Разбираем аудио-информацию на две части:
# 1. audio_data: Сами звуковые вибрации в виде массива чисел.
audio_data = audio_input["array"]
# 2. sampling_rate: "Паспорт" звука, его частота записи.
sampling_rate = audio_input["sampling_rate"]
# Сообщаем об успехе.
print("Послание призвано!")

# --- Акт 3: Создание Спектрального Отпечатка ---

# Сообщаем о начале анализа.
print("\nСоздаю магический отпечаток звука (Мел-спектрограмму)...")
# librosa.feature.melspectrogram - это заклинание, которое превращает одномерную
# звуковую волну (y=audio_data) в двумерную "карту частот", учитывая ее
# "паспорт" (sr=sampling_rate).
mel_spectrogram = librosa.feature.melspectrogram(
    y=audio_data, sr=sampling_rate
)

# librosa.power_to_db - это "логарифмическая линза". Она переводит абсолютную
# силу сигнала в децибелы (dB), что гораздо нагляднее для визуализации.
# ref=np.max - техническая деталь, указывающая, что 0 dB - это самый
# громкий звук.
log_mel_spectrogram = librosa.power_to_db(mel_spectrogram, ref=np.max)
# Сообщаем об успехе.
print("Отпечаток создан!")

# --- Акт 4: Ритуал Визуализации ---

# Сообщаем о начале рисования.
print("\nРисую отпечаток на магическом холсте...")
# plt.subplots() - заклинание, которое создает два артефакта:
# 1. fig - Вся "рамка" нашей будущей картины.
# 2. ax - Сам "холст" внутри рамки, на котором мы будем рисовать.
fig, ax = plt.subplots()

# librosa.display.specshow - это специальная кисть для рисования спектрограмм.
# 1. log_mel_spectrogram - Что рисовать.
# 2. sr, x_axis, y_axis - Как подписать оси (время и частоты).
# 3. ax=ax - На каком холсте рисовать.
img = librosa.display.specshow(
    log_mel_spectrogram, sr=sampling_rate, x_axis="time", y_axis="mel", ax=ax
)

# fig.colorbar(...) - добавляем сбоку "легенду", показывающую, какой цвет
# какой громкости соответствует.
fig.colorbar(img, ax=ax, format="%+2.0f dB")
# ax.set_title(...) - даем нашей картине название.
ax.set_title("Мел-спектрограмма (Отпечаток Звука)")

# --- Акт 5: Сохранение Артефакта ---

# plt.savefig(...) - финальное заклинание, которое материализует все,
# что нарисовано на холсте, в виде файла-артефакта.
plt.savefig("spectrogram.png")
# Сообщаем об успешном сохранении.
print("Рисунок сохранен в файл 'spectrogram.png'")
