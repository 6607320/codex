"""Квест 1.6: Призыв Духа-Сказителя.

Этот пергамент завершает "Фундамент Ремесла", переходя от анализа к синтезу.
Его главная цель (МАКРО-контекст) — продемонстрировать магию генерации текста,
используя высокоуровневый "амулет" `pipeline`.

Мы призываем "Духа-Сказителя" (`distilgpt2`) — сущность, способную не
анализировать готовый текст, а творить новый. Ритуал дает Духу начало
истории и позволяет ему продолжить ее, управляя процессом с помощью
"рун-ограничителей" (`max_length`).

Этот квест также закрепляет фундаментальный урок: Голема нужно "кормить"
той "пищей" (в данном случае, языком), к которой он привык.
"""

# --- Акт 1: Подготовка Гримуаров ---

# Снова используем наш универсальный "амулет" pipeline.
from transformers import pipeline

# PyTorch нужен, чтобы убедиться, что магия будет исполняться на Кристалле
# Маны.

# --- Акт 2: Призыв "Духа-Сказителя" ---

# Сообщаем о начале ритуала.
print("Снова призываю Духа-Сказителя...")

# Создаем наш "амулет" (объект pipeline), но уже для другой задачи.
# 1. 'text-generation' - Название задачи. Мы хотим "генерировать текст".
# 2. model='distilgpt2' - Имя "духа". distilgpt2 - это "младший брат" великого GPT-2,
#    он маленький, быстрый и идеально подходит для нашего Кристалла Маны.
# 3. device=0 - Это руна-приказ: "Исполняй это заклинание на Кристалле Маны
#    под номером 0 (основной GPU)". Это сильно ускоряет генерацию.
storyteller = pipeline("text-generation", model="distilgpt2", device=0)

# --- Акт 3: Ритуал Творения ---

# Создаем "затравку" (prompt) - начало истории, которое мы дадим Духу.
# ВАЖНО: Мы пишем его на английском, потому что дух distilgpt2 был обучен
# на гигантской библиотеке английских текстов.
prompt = "In the arcane workshop, the technomancer leaned over the glowing terminal..."
# Сообщаем, с чего начнется история.
print(f"Начало истории (на языке Духа): {prompt}")

# Запускаем сам процесс генерации.
# Мы передаем в "амулет" storyteller нашу затравку и несколько
# "управляющих рун":
generated_story = storyteller(
    prompt,
    # max_length - "Ограничитель". Вся история (затравка + продолжение)
    # не должна быть длиннее 60 "рун"-токенов. Защищает от переполнения маны.
    max_length=60,
    # num_return_sequences - "Умеренность". Просим сгенерировать только ОДИН
    # вариант продолжения истории.
    num_return_sequences=1,
)

# --- Акт 4: Демонстрация Результата ---

# Выводим заголовок для сгенерированного текста.
print("\n...Дух-Сказитель, поняв нас, продолжает:")
# Результат ('generated_story') - это список.
#  Мы берем первый (и единственный) элемент [0].
# Внутри него результат лежит в словаре под ключом 'generated_text'. Мы
# извлекаем его.
print(generated_story[0]["generated_text"])
