# === quest_1_5.py ===
# Квест: 1.5 - Заглянуть в разум Голема
# Цель: Вручную воспроизвести весь процесс предсказания (инференса), который
# "амулет" pipeline прятал от нас. Это ключевой квест для понимания,
# как на самом деле работает магия.

# --- Акт 1: Подготовка Гримуаров ---

# Призываем наш главный силовой гримуар "PyTorch".
import torch

# Призываем чертеж "Универсального Переводчика" (AutoTokenizer)
# и чертеж "Голема для Классификации Текста"
# (AutoModelForSequenceClassification).
from transformers import AutoModelForSequenceClassification, AutoTokenizer

# --- Акт 2: Призыв Существ ---

# Сообщаем о начале ритуала.
print("Призываем Переводчика и Голема...")

# Создаем конкретный экземпляр Переводчика для модели 'distilbert...'.
translator = AutoTokenizer.from_pretrained(
    "distilbert-base-uncased-finetuned-sst-2-english"
)

# Создаем конкретный экземпляр Голема. Важно, что Переводчик и Голем
# призваны из одного источника - они говорят на одном "диалекте".
golem = AutoModelForSequenceClassification.from_pretrained(
    "distilbert-base-uncased-finetuned-sst-2-english"
)

# --- Акт 3: Подготовка "Пищи" для Голема ---

# Создаем фразу, которую будем анализировать.
my_phrase = "Этот кодекс квестов - нечто!"

# Переводим фразу в числовые руны.
# Добавляем важную руну-модификатор: return_tensors="pt".
# Она приказывает Переводчику вернуть результат не как простой список чисел,
# а как специальный магический объект - Тензор PyTorch ("pt"), который
# "ест" наш Голем.
runes = translator(my_phrase, return_tensors="pt")

# Сообщаем о результате этого шага.
print("Перевели фразу в руны, понятные Голему.")
print(runes["input_ids"])

# --- Акт 4: Ритуал "Чтения Мыслей" ---

# Сообщаем о начале самого важного акта.
print("\nКормим руны Голему и заглядываем в его разум...")

# `torch.no_grad()` - это защитное заклинание.
# Оно говорит PyTorch: "Мы сейчас не обучаем, а только спрашиваем. Отключи
# все сложные механизмы отслеживания ошибок (градиентов), чтобы сэкономить
# ману".
with torch.no_grad():
    # Мы "скармливаем" руны (runes) нашему Голему (golem).
    # Две звездочки (**) - это магия Python, которая "распаковывает" словарь 'runes'
    # и передает его компоненты ('input_ids', 'attention_mask') Голему как
    # отдельные аргументы.
    outputs = golem(**runes)

# Результат работы Голема ('outputs') - это сложный объект. Его "сырые мысли"
# хранятся в поле .logits. Мы извлекаем их.
raw_thoughts = outputs.logits
# Логиты - это просто числа. Чем больше число, тем увереннее Голем в этой "мысли".
# У нашего Голема две "мысли": NEGATIVE и POSITIVE.
print("Сырые мысли Голема (логиты):", raw_thoughts)

# --- Акт 5: Интерпретация Мыслей ---

# Сообщаем о начале финального акта.
print("\nИнтерпретируем мысли Голема...")

# .argmax() - это заклинание, которое находит
#  ИНДЕКС (позицию) самого большого числа в тензоре.
# .item() - извлекает это число-индекс из тензора, чтобы с ним было удобно работать.
# Если логиты были [[-2.4, 2.6]], то argmax вернет 1.
strongest_thought_id = raw_thoughts.argmax().item()
print("ID самой сильной мысли:", strongest_thought_id)

# У каждого Голема есть "паспорт" (.config), а в нем - шпаргалка .id2label.
# Она выглядит как словарь: {0: 'NEGATIVE', 1: 'POSITIVE'}.
# Мы используем полученный ID как ключ, чтобы узнать человекопонятное имя
# "мысли".
thought_name = golem.config.id2label[strongest_thought_id]
# Выводим финальный вердикт, который мы получили, проанализировав разум Голема.
print("Вердикт Техноманта:", thought_name)
