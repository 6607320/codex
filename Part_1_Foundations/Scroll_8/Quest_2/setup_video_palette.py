# === setup_video_palette.py ===
# Имя этого пергамента, хранящего ритуал сотворения нашего видео-учебника.
# Квест: Подготовительный ритуал для Квеста 8.2
# Каноническое имя Квеста, как оно записано в Великом Кодексе.
# Цель: Создать наш собственный, чистый видео-датасет с двумя
# Священная цель нашего ритуала.
# разными "действиями", чтобы на нем можно было обучить классификатор.
# Детальное описание цели.
# Мы используем магию OpenCV для генерации анимации.
# Указание на главный инструмент, который мы будем использовать.

# --- Акт 1: Подготовка Гримуаров ---
# Первый акт: мы призываем все необходимые знания и инструменты для ритуала.

# Мы призываем "Духа-Архивариуса" (`os`), который знает всё о файлах и папках.
import os

# Мы призываем могущественный гримуар `cv2` (OpenCV), известный как "Набор
# Кинематографиста".
import cv2

# Мы призываем помощника `numpy` для математических операций, особенно для
# матриц трансформации.
import numpy as np

# --- Акт 2: Подготовка "Сцены" ---
# Второй акт: мы создаем "съемочную площадку" — структуру папок для наших фильмов.

# Мы оглашаем на кристалл (консоль) о начале ритуала.
print("Создаю видео-палитру для обучения...")
# Мы создаем структуру папок. 'video_palette' — это наш "магический сад".
# Внутри него — две "грядки", по одной для каждого класса действий.
os.makedirs("video_palette/action_A", exist_ok=True)
# Мы создаем вторую "грядку" для второго класса действий.
os.makedirs("video_palette/action_B", exist_ok=True)

# --- Акт 3: Призыв "Актера" ---
# Третий акт: мы призываем главного героя наших фильмов.

# Мы загружаем наш артефакт 'magical_cat.png', который будет "актером" в
# обоих "фильмах".
img = cv2.imread("magical_cat.png")
# Мы измеряем его размеры, чтобы наша "сцена" (видео-кадр) была такого же размера.
height, width, _ = img.shape

# --- Акт 4: Съемка "Действия А" (Движение вправо) ---
# Четвертый акт: мы создаем первый фильм, демонстрирующий одно действие.

# Мы готовим первую "кинопленку" для записи.
out_A = cv2.VideoWriter(
    # Мы указываем путь, куда сохранить фильм.
    "video_palette/action_A/video1.mp4",
    # Мы указываем кодек для сжатия видео.
    cv2.VideoWriter_fourcc(*"mp4v"),
    # Мы устанавливаем скорость: 10 кадров в секунду.
    10,
    # Мы указываем размер кадра (ширина, высота).
    (width, height),
)
# Мы запускаем ритуальный цикл, который создаст 30 кадров.
for i in range(30):
    # Мы создаем "матрицу сдвига" — заклинание 2x3, которое описывает трансформацию.
    # `[1, 0, i*5]` означает "сдвинуть по горизонтали на `i*5` пикселей".
    M = np.float32([[1, 0, i * 5], [0, 1, 0]])
    # Мы применяем эту матрицу к нашему "актеру" (`img`), создавая сдвинутый кадр.
    shifted = cv2.warpAffine(img, M, (width, height))
    # Мы записываем этот измененный кадр на нашу "кинопленку".
    out_A.write(shifted)
# Мы "запечатываем" и сохраняем первый фильм.
out_A.release()

# --- Акт 5: Съемка "Действия Б" (Увеличение) ---
# Пятый акт: мы создаем второй фильм, демонстрирующий другое действие.

# Мы готовим вторую "кинопленку" для записи.
out_B = cv2.VideoWriter(
    # Мы указываем путь для второго фильма.
    "video_palette/action_B/video2.mp4",
    # Мы указываем тот же кодек.
    cv2.VideoWriter_fourcc(*"mp4v"),
    # Мы устанавливаем ту же скорость.
    10,
    # Мы указываем тот же размер кадра.
    (width, height),
)
# Мы запускаем второй ритуальный цикл на 30 кадров.
for i in range(30):
    # Мы вычисляем коэффициент "зума", который плавно растет с каждым кадром.
    scale = 1 + i * 0.02
    # Мы используем заклинание `cv2.resize`, чтобы увеличить нашего "актера".
    zoomed = cv2.resize(img, None, fx=scale, fy=scale, interpolation=cv2.INTER_LINEAR)

    # Мы применяем хитрый трюк для создания эффекта "наезда камеры":
    # Мы измеряем размеры увеличенного образа.
    h, w, _ = zoomed.shape
    # Мы вычисляем координаты, чтобы вырезать центральную часть размером с
    # исходный кадр.
    start_h, start_w = h // 2 - height // 2, w // 2 - width // 2
    # Мы "вырезаем" этот центральный фрагмент.
    cropped = zoomed[start_h: start_h + height, start_w: start_w + width]

    # Мы записываем этот "приближенный" и обрезанный кадр на вторую "кинопленку".
    out_B.write(cropped)
# Мы "запечатываем" и сохраняем второй фильм.
out_B.release()

# --- Акт 6: Завершение ---
# Финальный акт: мы оглашаем об успешном завершении ритуала.
print("Видео-палитра с двумя 'действиями' создана.")
