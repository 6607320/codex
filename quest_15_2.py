# === quest_15_2.py ===
# Квест: 15.2 - "Призыв Духов-Помощников"
# Цель: Понять и измерить эффект от использования `num_workers` в DataLoader
# для ускорения "конвейера" подготовки данных. Мы докажем на практике,
# что параллельная загрузка значительно быстрее последовательной.

# --- Акт 1: Подготовка Гримуаров ---
# Призываем наш силовой гримуар PyTorch.
import torch
# Из 'torch.utils.data' призываем чертежи для "Хранителя" и "Подносчика".
from torch.utils.data import Dataset, DataLoader
# Призываем заклинание 'Image' из гримуара "Pillow".
from PIL import Image
# Призываем помощника 'os' для работы с путями.
import os
# Призываем помощника 'glob' для поиска файлов.
import glob
# Призываем гримуар 'transforms' для создания "магических линз".
from torchvision import transforms
# Призываем гримуар "Хронометра" для точного замера времени.
import time

# --- Акт 2: Чертеж "Хранителя Свитков" (с искусственной задержкой) ---
# Мы используем тот же чертеж, что и в Квесте 15.1.
class CustomImageDataset(Dataset):
    # Заклинание Инициализации.
    def __init__(self, directory, transform=None):
        # Создает "каталог" путей к изображениям.
        self.image_paths = glob.glob(os.path.join(directory, '*.png'))
        # Запоминает "линзы".
        self.transform = transform
    # Заклинание Подсчета.
    def __len__(self):
        # Возвращает общее количество "свитков".
        return len(self.image_paths)
    # Заклинание "Принеси-Свиток".
    def __getitem__(self, idx):
        # Находит путь к нужному свитку.
        image_path = self.image_paths[idx]
        # Открывает его с диска.
        image = Image.open(image_path).convert("RGB")
        
        # ВАЖНО: Добавляем искусственную задержку.
        # time.sleep(0.05) - приказывает ритуалу "заснуть" на 0.05 секунды.
        # Это имитирует сложную и долгую обработку данных (например, сложную аугментацию),
        # чтобы разница в скорости между режимами была более очевидной.
        time.sleep(0.05)
        
        # Если есть "линзы", применяем их.
        if self.transform:
            image = self.transform(image)
        # Возвращаем результат.
        return image, idx

# --- Акт 3: Подготовка к Эксперименту ---
# Создаем конвейер "линз".
data_transform = transforms.Compose([
    transforms.Resize((64, 64)),
    transforms.ToTensor()
])
# Сотворяем "Хранителя", передавая ему нашу "библиотеку" и "линзы".
image_dataset = CustomImageDataset(directory='generated_palette', transform=data_transform)

# --- Акт 4: Эксперимент "Ленивый Подносчик" (Последовательный режим) ---
print("--- Эксперимент 1: Ленивый Подносчик (0 духов-помощников) ---")
# Сотворяем "Подносчика" в стандартном, "ленивом" режиме.
# num_workers=0 - это значение по умолчанию. Оно означает, что основной
# процесс будет сам, последовательно, ходить за каждой пачкой данных.
lazy_dataloader = DataLoader(image_dataset, batch_size=4, shuffle=True, num_workers=0)

# time.time() - заклинание, которое возвращает текущее "магическое время" (в секундах).
start_time = time.time()
# Запускаем цикл, который "пролистывает" все пачки данных.
# `_` - означает "мне не важны сами данные, я просто хочу выполнить действие".
for _ in lazy_dataloader:
    # `pass` - заклинание "ничего не делать".
    pass
# Снова замеряем время.
end_time = time.time()

# Выводим разницу между конечным и начальным временем.
print(f"Время выполнения: {end_time - start_time:.4f} секунд")

# --- Акт 5: Эксперимент "Эффективный Подносчик" (Параллельный режим) ---
print("\n--- Эксперимент 2: Эффективный Подносчик (4 духа-помощника) ---")
# Сотворяем второго "Подносчика", но с могущественной руной `num_workers=4`.
# Это приказ: "Сотвори 4 отдельных 'духа-помощника' (процесса), которые будут
# в фоновом режиме заранее готовить для меня пачки данных".
efficient_dataloader = DataLoader(image_dataset, batch_size=4, shuffle=True, num_workers=4)

# Снова запускаем хронометр.
start_time = time.time()
# "Пролистываем" данные с помощью уже "усиленного" Подносчика.
for _ in efficient_dataloader:
    pass
# Снова останавливаем хронометр.
end_time = time.time()

# Выводим результат второго эксперимента.
print(f"Время выполнения: {end_time - start_time:.4f} секунд")
print("\nРитуал завершен! Сравни время выполнения. Магия параллелизма очевидна.")