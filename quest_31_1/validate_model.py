# === validate_model.py (Версия 2.0: CLI-Артефакт) ===

# --- Акт 1: Призыв Гримуаров ---
# Мы призываем заклинание 'pipeline' из Великого Гримуара 'transformers' для сотворения AI-духов.
from transformers import pipeline
# Мы призываем наш "Камень Истины" (`VALIDATION_SET`), эталон для проверки мудрости духов.
from validation_data import VALIDATION_SET
# --- > НОВАЯ РУНА: Мы призываем могущественного духа 'click', мастера командной строки и красноречия.
import click

# --- Акт 2: Основной Ритуал Валидации ---
# --- > НОВАЯ РУНА: Это заклинание-декоратор от духа 'click', оно превращает нашу простую функцию в могущественную команду для терминала.
@click.command()
# --- > НОВАЯ РУНА: Этот декоратор создает настраиваемую опцию для нашей новой команды.
@click.option(
    # Имя опции, которое Мастер будет использовать в терминале: '--model-name'.
    '--model-name',
    # Значение по умолчанию: если Мастер не укажет иное, будет призван этот дух.
    default="distilbert-base-uncased-finetuned-sst-2-english",
    # Текст помощи: мудрость, которую 'click' покажет Мастеру, если тот попросит о помощи (`--help`).
    help="Имя модели из Hugging Face Hub для проведения валидации."
)
# Наша функция теперь волшебным образом получает значение из опции '--model-name' в качестве аргумента.
def run_validation(model_name):
    """
    Загружает указанную модель, проводит валидуцию и выводит результат в консоль.
    """
    # Мы используем заклинание 'secho' от 'click', чтобы объявить о начале ритуала сияющим желтым цветом.
    click.secho(f"[*] Призываю духа модели: '{model_name}'...", fg='yellow')
    
    # Мы начинаем защитный ритуал 'try', чтобы поймать любую ошибку, если дух не откликнется на зов.
    try:
        # Мы произносим заклинание 'pipeline', используя имя, переданное Мастером.
        sentiment_analyzer = pipeline("sentiment-analysis", model=model_name)
        # Если призыв успешен, мы объявляем об этом победным зеленым цветом.
        click.secho("[+] Дух готов к испытанию.", fg='green')
    # Если во время призыва произошла ошибка, наш защитный ритуал ловит ее.
    except Exception as e:
        # Мы кричим об ошибке тревожным красным цветом, объясняя, что пошло не так.
        click.secho(f"[!] Ошибка призыва: {e}", fg='red')
        # И немедленно прерываем ритуал, так как без духа продолжать бессмысленно.
        return

    # Мы готовим счетный камень для верных предсказаний, начиная с нуля.
    correct_predictions = 0
    # Мы узнаем, сколько всего испытаний предстоит пройти духу.
    total_samples = len(VALIDATION_SET)

    # Мы объявляем о начале испытаний, используя стандартное заклинание 'echo' от 'click'.
    click.echo(f"[*] Начинаю испытание на {total_samples} примерах...")
    
    # Это могущественная магия визуализации: мы создаем шкалу прогресса для наших испытаний.
    with click.progressbar(VALIDATION_SET, label="Провожу испытание...") as bar:
        # Мы перебираем не сами испытания, а шкалу прогресса, которая отдает нам их по одному.
        for item in bar:
            # Извлекаем текст загадки.
            text = item["text"]
            # Извлекаем истинный ответ.
            true_label = item["label"]
            # Спрашиваем предсказание у нашего духа.
            prediction = sentiment_analyzer(text)[0]
            # Сравниваем ответ духа с истиной.
            if prediction['label'] == true_label:
                # Если ответ верен, мы добавляем единицу на наш счетный камень.
                correct_predictions += 1
    
    # После всех испытаний мы вычисляем итоговую точность духа в процентах.
    accuracy = (correct_predictions / total_samples) * 100
    
    # Мы объявляем о завершении ритуала победным зеленым цветом.
    click.secho("[+] Испытание завершено!", fg='green')
    
    # Мы начинаем печатать финальный отчет, выделяя заголовок жирным шрифтом для важности.
    click.secho(f"\n--- Отчет о Силе Духа ---", bold=True)
    # Печатаем вычисленную точность.
    click.echo(f"Точность модели: {accuracy:.2f}%")
    # Печатаем количество верных ответов для полной ясности.
    click.echo(f"Верных предсказаний: {correct_predictions} из {total_samples}")
    # Завершаем отчет еще одной жирной линией.
    click.secho(f"--------------------------", bold=True)

# --- Акт 3: Точка Входа в Ритуал ---
# Эта древняя руна проверяет: "Этот пергамент был запущен напрямую Мастером?".
if __name__ == "__main__":
    # Если да, то она запускает наш главный ритуал, который теперь является могущественной 'click'-командой.
    run_validation()