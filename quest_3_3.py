# === quest_3_3.py ===
# Квест: 3.3 - Усиление Иллюзий
# Цель: Освоить аугментацию - технику программного изменения изображений.
# Это фундаментальный навык для подготовки "учебников" для моделей
# компьютерного зрения, позволяющий из одного образа создать множество вариаций.

# --- Акт 1: Подготовка Гримуаров ---

# Призываем из гримуара "torchvision" раздел 'transforms' (трансформации).
# 'as T' - это создание короткого псевдонима 'T', чтобы не писать длинное имя каждый раз.
import torchvision.transforms as T

# Призываем из гримуара "Pillow" заклинание 'Image' для работы с файлами изображений.
from PIL import Image

# --- Акт 2: Загрузка Артефакта ---

# Записываем в переменную путь к нашему артефакту, созданному на прошлом квесте.
original_artifact_path = "magical_cat.png"
print(f"Загружаю наш артефакт: {original_artifact_path}")

# Используем заклинание Image.open() для "вскрытия" файла и загрузки
# его содержимого (пикселей) в память, в переменную 'original_image'.
original_image = Image.open(original_artifact_path)

# --- Акт 3: Создание Конвейера "Магических Линз" ---

print("\nСоздаю конвейер магических линз (трансформаций)...")

# T.Compose - это заклинание, которое создает "конвейер". Оно принимает
# список трансформаций и будет применять их к изображению последовательно,
# сверху вниз.
transform_pipeline = T.Compose(
    [
        # Линза 1: T.Resize((256, 256))
        # Изменяет размер изображения до 256x256 пикселей.
        T.Resize((256, 256)),
        # Линза 2: T.RandomHorizontalFlip(p=1.0)
        # Отражает изображение по горизонтали. 'Random' означает "случайно".
        # p=1.0 - вероятность срабатывания 100%. Мы приказываем отражать всегда.
        T.RandomHorizontalFlip(p=1.0),
        # Линза 3: T.RandomRotation(degrees=45)
        # Поворачивает изображение на случайный угол в диапазоне от -45 до +45 градусов.
        T.RandomRotation(degrees=45),
        # Линза 4: T.ColorJitter(brightness=.5, hue=.3)
        # "Искажает" цвета. Случайным образом меняет яркость (brightness) и оттенок (hue).
        T.ColorJitter(brightness=0.5, hue=0.3),
    ]
)

# --- Акт 4: Применение Магии ---

print("Применяю трансформации к нашему артефакту...")

# Это само магическое действие! Мы "пропускаем" наш исходный образ
# (original_image) через созданный конвейер (transform_pipeline).
# Результат - новый, измененный образ - мы сохраняем в 'transformed_image'.
transformed_image = transform_pipeline(original_image)

# --- Акт 5: Сохранение Нового Артефакта ---

# Используем метод .save() нашего нового образа, чтобы материализовать его
# в виде файла на диске.
transformed_image.save("transformed_cat.png")
print("\nМагия трансформации свершилась! Новый образ сохранен в 'transformed_cat.png'")
