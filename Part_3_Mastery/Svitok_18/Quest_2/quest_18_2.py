# === quest_18_2.py (Финальная Версия с "Памятью" и Полными Комментариями) ===
# Имя этого пергамента, хранящего финальную, исправленную версию ритуала с "памятью".
# Квест: 18.2 - Подсчет Объектов
# Каноническое имя Квеста, как оно записано в Великом Кодексе.
# Цель: Усовершенствовать наш скрипт, добавив простейшую "память" (трекинг),
# Священная цель нашего ритуала.
# чтобы решить проблему "мерцающей" детекции и считать объекты на каждом кадре.
# Детальное описание цели.

# Мы призываем "Духа-Архивариуса" (`os`) для работы с папками.
import os

# Мы призываем "Набор Кинематографиста" (`cv2`) для работы с видео и рисования.
import cv2

# --- Акт 1: Подготовка Гримуаров ---
# Начинается первый акт: мы призываем все необходимые знания и инструменты.
# Мы призываем наш главный силовой гримуар `PyTorch`.
import torch

# Мы призываем наш "индикатор прогресса" (`tqdm`).
from tqdm import tqdm

# --- Акт 2: Пробуждение и Настройка Химеры ---
# Начинается второй акт: мы пробуждаем нашего духа-охотника.
# Мы оглашаем на кристалл (консоль) о начале ритуала.
print("Пробуждаю 'Сторожевую Химеру' (YOLOv5)...")
# `torch.hub.load()` — призывает артефакт 'yolov5n' из хранилища 'ultralytics/yolov5'.
model = torch.hub.load("ultralytics/yolov5", "yolov5n", pretrained=True)
# `model.conf` — это "характер" Химеры, ее "порог уверенности".
# Мы снижаем его до 0.10 (10%), чтобы она сообщала даже о неуверенных находках.
model.conf = 0.10
# `if torch.cuda.is_available():` — мы проверяем, доступен ли Кристалл Маны.
if torch.cuda.is_available():
    # `model.to('cuda')` — если да, мы отправляем Химеру туда для ускорения.
    model = model.to("cuda")
# Мы оглашаем об успешном пробуждении.
print("Химера пробудилась и готова считать!")

# --- Акт 3: Подготовка к "Охоте и Учету" ---
# Начинается третий акт: мы готовим "охотничьи угодья".
# Мы оглашаем о подключении к источнику.
print("\nПодключаюсь к 'Магической Кинопленке'...")
# Мы "захватываем" наш видеофайл.
cap = cv2.VideoCapture("test_video.mp4")
# Мы готовим новую папку для результатов этого квеста.
output_folder = "counting_results"
# Мы создаем папку, если ее еще не существует.
os.makedirs(output_folder, exist_ok=True)
# Мы готовим счетчик для нумерации сохраненных кадров.
frame_count = 0
# Мы узнаем общее число кадров для нашего индикатора.
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

# --- НОВАЯ МАГИЯ: Создание "Чаши Памяти" ---
# `last_known_results`: Мы создаем "магическую чашу", которая будет хранить
# "воспоминание" о последнем успешном отчете Химеры. Вначале она пуста (`None`).
last_known_results = None

# --- Акт 4: Ритуал "Охоты с Памятью" ---
# Начинается четвертый, кульминационный акт: мы начинаем охоту с использованием "памяти".
# Мы оглашаем о начале основного ритуала.
print("Начинаю 'Охоту и Учет'...")

# Мы запускаем цикл по всем кадрам, обернутый в "индикатор прогресса".
for _ in tqdm(range(total_frames), desc="Подсчет на кинопленке"):
    # Мы читаем следующий кадр из кинопленки.
    success, frame = cap.read()
    # Если кадры закончились, мы прерываем ритуал.
    if not success:
        # Мы произносим заклинание `break`.
        break

    # Мы "скармливаем" текущий кадр Химере.
    results = model(frame)

    # --- Логика "Памяти" ---
    # `len(results.xyxy[0]) == 0`: Мы спрашиваем: "Отчет Химеры для ЭТОГО кадра пуст?"
    # `... and last_known_results is not None`: "...И (`and`) при этом у нас есть что-то в 'памяти'?"
    if len(results.xyxy[0]) == 0 and last_known_results is not None:
        # `detections_to_draw = last_known_results`: "...то для рисования мы будем использовать 'воспоминание'".
        detections_to_draw = last_known_results
    # В противном случае (если Химера что-то нашла)...
    else:
        # `detections_to_draw = results.xyxy[0]`: "...мы используем свежий 'отчет'".
        detections_to_draw = results.xyxy[0]
        # И если этот свежий отчет не пустой...
        if len(detections_to_draw) > 0:
            # `last_known_results = detections_to_draw`: "...мы ОБНОВЛЯЕМ нашу 'память'".
            last_known_results = detections_to_draw

    # --- Ритуал Подсчета и Рисования ---
    # Мы готовим счетчик. Важно: мы обнуляем его для КАЖДОГО нового кадра.
    object_counter = 0
    # Мы определяем нашу цель для подсчета, основанную на результатах диагностики.
    target_class = "stop sign"

    # `if detections_to_draw is not None`: Мы используем защитную руну на случай, если и свежих, и старых результатов нет.
    if detections_to_draw is not None:
        # Мы перебираем объекты из `detections_to_draw` (свежие или из памяти).
        for *box, conf, cls in detections_to_draw:
            # Мы узнаем имя найденного объекта по его номеру `cls`.
            detected_class = model.names[int(cls)]
            # Мы проверяем, совпадает ли он с нашей целью.
            if detected_class.strip() == target_class:
                # Если да, мы увеличиваем счетчик.
                object_counter += 1

            # --- Ритуал "Явных Чернил" (Нанесение отметок на кадр) ---

            # `label = ...`: Мы создаем текстовую "бирку" для нашего объекта.
            label = f"{detected_class} {conf:.2f}"

            # `x1, y1, x2, y2 = map(int, box)`: Мы "распаковываем" и округляем координаты рамки.
            x1, y1, x2, y2 = map(int, box)

            # `cv2.rectangle(...)`: Мы произносим главное заклинание рисования рамки.
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

            # `cv2.putText(...)`: Мы произносим главное заклинание нанесения текста.
            cv2.putText(
                # На каком кадре рисовать.
                frame,
                # Какой текст писать.
                label,
                # Где начинать писать.
                (x1, y1 - 10),
                # Какой шрифт использовать.
                cv2.FONT_HERSHEY_SIMPLEX,
                # Размер шрифта.
                0.5,
                # Цвет шрифта.
                (0, 255, 0),
                # Толщина шрифта.
                2,
            )

    # Мы наносим на кадр итоговый счетчик.
    summary_text = f"Stop signs found: {object_counter}"
    # Мы наносим этот текст красным цветом (`0,0,255`) в углу кадра.
    cv2.putText(
        # На каком кадре рисовать.
        frame,
        # Какой текст писать.
        summary_text,
        # Где начинать писать (левый верхний угол).
        (10, 30),
        # Какой шрифт использовать.
        cv2.FONT_HERSHEY_SIMPLEX,
        # Размер шрифта.
        1,
        # Цвет шрифта (BGR).
        (0, 0, 255),
        # Толщина шрифта.
        2,
    )

    # Мы сохраняем измененный кадр с рамками и счетчиком.
    save_path = os.path.join(output_folder, f"count_frame_{frame_count}.jpg")
    # `cv2.imwrite` — это заклинание "записать образ".
    cv2.imwrite(save_path, frame)
    # Мы увеличиваем счетчик сохраненных кадров.
    frame_count += 1

# --- Акт 5: Завершение Ритуала ---
# Начинается финальный акт: мы освобождаем ресурсы и подводим итоги.
# Мы "освобождаем" кинопленку.
cap.release()
# Мы сообщаем финальный результат.
print(
    f"\nРитуал завершен. {frame_count} кадра с подсчетом сохранено в папку '{output_folder}'."
)
