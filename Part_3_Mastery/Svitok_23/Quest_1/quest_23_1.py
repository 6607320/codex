# –í–µ–ª–∏–∫–∏–π –ö–æ–¥–µ–∫—Å –¢–µ—Ö–Ω–æ–º–∞–≥–∏–∏
# –°–≤–∏—Ç–æ–∫ 23: –ó–∞–ª –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
# –ö–≤–µ—Å—Ç 23.1: –°–æ–∑–¥–∞–Ω–∏–µ "–ú–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –ó–µ—Ä–∫–∞–ª–∞"

# --- –ß–∞—Å—Ç—å I: –ò–º–ø–æ—Ä—Ç –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –ì—Ä–∏–º—É–∞—Ä–æ–≤ ---

# –ü—Ä–∏–∑—ã–≤–∞–µ–º 'gradio' (gr) - –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—É—Ö–∞-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
import gradio as gr

# –ü—Ä–∏–∑—ã–≤–∞–µ–º 'torch' - –Ω–∞—à –ò—Å—Ç–æ—á–Ω–∏–∫ –ú–∞–Ω—ã.
import torch

# –ò–∑ –≥—Ä–∏–º—É–∞—Ä–∞ 'transformers' –ø—Ä–∏–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º–∏ –≥–æ–ª–µ–º–∞–º–∏.
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# --- –ß–∞—Å—Ç—å II: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –†–∏—Ç—É–∞–ª—É ---

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ('cuda' - –ö—Ä–∏—Å—Ç–∞–ª–ª –ú–∞–Ω—ã GPU, 'cpu' - –†–∞–∑—É–º CPU), –≥–¥–µ –±—É–¥–µ—Ç –≤–µ—Ä—à–∏—Ç—å—Å—è –º–∞–≥–∏—è.
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
# –ó–∞–¥–∞–µ–º –ø—É—Ç—å –∫ "—Ç–µ–ª—É" –Ω–∞—à–µ–≥–æ –¥–æ–æ–±—É—á–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–µ–º–∞ –∏–∑ –ö–≤–µ—Å—Ç–∞ 5.3.
MODEL_PATH = "./results/checkpoint-250"

# –û–ø–æ–≤–µ—â–∞–µ–º –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ.
print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∏—Ç—É–∞–ª—É –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {DEVICE}")
print(f"–ó–∞–≥—Ä—É–∑–∫–∞ '—Ä–∞–∑—É–º–∞' –≥–æ–ª–µ–º–∞ –∏–∑: {MODEL_PATH}")

# –ü—Ä–∏–∑—ã–≤–∞–µ–º –¢–æ–ª–º–∞—á–∞ (Tokenizer) –¥–ª—è –Ω–∞—à–µ–≥–æ –≥–æ–ª–µ–º–∞.
tokenizer = GPT2Tokenizer.from_pretrained(MODEL_PATH)
# –ü—Ä–∏–∑—ã–≤–∞–µ–º —Å–∞–º–æ–≥–æ –ì–æ–ª–µ–º–∞-–°–∫–∞–∑–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞–ª—Ç–∞—Ä—å.
model = GPT2LMHeadModel.from_pretrained(MODEL_PATH).to(DEVICE)
# –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥–æ–ª–µ–º–∞ –≤ —Ä–µ–∂–∏–º "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è".
model.eval()

# –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≥–æ–ª–µ–º –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.
print("...–ì–æ–ª–µ–º-–°–∫–∞–∑–∏—Ç–µ–ª—å –ø—Ä–æ–±—É–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ç–≤–æ—Ä–∏—Ç—å.")


# --- –ß–∞—Å—Ç—å III: –ß–µ—Ä—Ç–µ–∂ –ì–ª–∞–≤–Ω–æ–≥–æ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è ---


# –ú—ã —Å–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –º–∞–≥–∏—é.
# –û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å "—Å—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å "—Å—ã—Ä–æ–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
def conjure_story(prompt_text, max_new_tokens=50):
    # –û–ø–æ–≤–µ—â–∞–µ–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, —á—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ.
    print(f"\n–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—Ç—Ä–∞–≤–∫–∞: '{prompt_text}'")

    # –¢–æ–ª–º–∞—á –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞—Ç—Ä–∞–≤–∫—É –≤ —Ä—É–Ω—ã-—Ç–æ–∫–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∞–ª—Ç–∞—Ä—å.
    inputs = tokenizer.encode(prompt_text, return_tensors="pt").to(DEVICE)

    # –ì–æ–ª–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏.
    # 'max_new_tokens' - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≥–æ–ª–µ–º –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å.
    outputs = model.generate(
        inputs, max_new_tokens=max_new_tokens, no_repeat_ngram_size=2
    )

    # –¢–æ–ª–º–∞—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ä—É–Ω—ã-—Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # –û–ø–æ–≤–µ—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: '{generated_text}'")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã 'Gradio' –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    return generated_text


# --- –ß–∞—Å—Ç—å IV: –†–∏—Ç—É–∞–ª –°–æ–∑–¥–∞–Ω–∏—è "–ú–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –ó–µ—Ä–∫–∞–ª–∞" ---
# –≠—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ('if __name__ == "__main__":') - —Å–≤—è—â–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –ª—é–±–æ–≥–æ –ø–µ—Ä–≥–∞–º–µ–Ω—Ç–∞.
if __name__ == "__main__":
    # –û–ø–æ–≤–µ—â–∞–µ–º –æ —Å–æ—Ç–≤–æ—Ä–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    print("\n–°–æ—Ç–≤–æ—Ä—è–µ–º '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ó–µ—Ä–∫–∞–ª–æ' —Å –ø–æ–º–æ—â—å—é Gradio...")

    # –ì–ª–∞–≤–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ 'Gradio': "–°–æ–∑–¥–∞–π –º–Ω–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å".
    # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É –Ω–∞—à–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ 'conjure_story' –∏ –æ–ø–∏—Å—ã–≤–∞–µ–º "–æ–∫–Ω–∞" –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞.
    demo = gr.Interface(
        # 'fn' - –∫–∞–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—é) –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ó–µ—Ä–∫–∞–ª–æ.
        fn=conjure_story,
        # 'inputs' - –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
        # 'gr.Textbox' - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ.
        # 'lines=3' - –≤—ã—Å–æ—Ç–æ–π –≤ 3 —Å—Ç—Ä–æ–∫–∏.
        # 'label' - –ø–æ–¥–ø–∏—Å—å –Ω–∞–¥ –ø–æ–ª–µ–º.
        # 'placeholder' - —Ç–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è.
        inputs=gr.Textbox(
            lines=3,
            label="–ù–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ (–ó–∞—Ç—Ä–∞–≤–∫–∞)",
            placeholder="–û–¥–Ω–∞–∂–¥—ã –≤ –¥–∞–ª–µ–∫–æ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ...",
        ),
        # 'outputs' - –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–∫–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        outputs=gr.Textbox(label="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"),
        # 'title' - –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—à–µ–≥–æ –ó–µ—Ä–∫–∞–ª–∞.
        title="üîÆ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ó–µ—Ä–∫–∞–ª–æ: –î—É—Ö-–°–∫–∞–∑–∏—Ç–µ–ª—å üîÆ",
        # 'description' - —Ç–µ–∫—Å—Ç-–ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
        description="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏, –∏ –ì–æ–ª–µ–º-–°–∫–∞–∑–∏—Ç–µ–ª—å (–¥–æ–æ–±—É—á–µ–Ω–Ω—ã–π `distilgpt2`) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –µ–µ. –≠—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –ö–≤–µ—Å—Ç–µ 5.3.",
    )

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: "–ü—Ä–æ–±—É–¥–∏—Å—å, –ó–µ—Ä–∫–∞–ª–æ, –∏ —è–≤–∏ —Å–µ–±—è –º–∏—Ä—É!".
    # –≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ —Å–¥–µ–ª–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
    demo.launch()
