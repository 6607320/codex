# Великий Кодекс Техномагии
# Свиток 22: Магический Компас
# Квест 22.1: Призыв Компаса (Финальная Архивная версия v2)

# --- Часть I: Импорт Магических Гримуаров ---

# Призываем 'torch' - наш Источник Маны.
import torch

# Призываем гримуар 'datasets' для надежного и вечного доступа к данным из
# хранилища Hugging Face.
from datasets import load_dataset

# Из гримуара 'transformers' призываем чертежи нашего мультимодального
# голема CLIP и его Толмача.
from transformers import CLIPModel, CLIPProcessor

# Призываем 'Pillow' (PIL) - духа, умеющего работать с изображениями
# (открывать, изменять).


# --- Часть II: Подготовка к Ритуалу ---

# Определяем устройство ('cuda' - Кристалл Маны GPU, 'cpu' - Разум CPU),
# где будет вершиться магия.
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
# Оповещаем о выбранном устройстве.
print(f"Магия будет вершиться на устройстве: {DEVICE}")

# --- Часть III: Главный Ритуал ---
# Эта конструкция ('if __name__ == "__main__":') - священное начало любого пергамента.
if __name__ == "__main__":
    # --- Акт 1: Призыв Мультимодального Голема CLIP ---
    # Задаем имя чертежа, по которому будет призван наш голем.
    model_name = "openai/clip-vit-base-patch32"
    # Оповещаем о начале призыва.
    print(f"Призываем могущественного голема '{model_name}'...")

    # Призываем самого Голема CLIP по его имени и отправляем на магический алтарь.
    model = CLIPModel.from_pretrained(model_name).to(DEVICE)
    # Призываем его верного "Толмача" (Processor), который умеет готовить и
    # текст, и картинки.
    processor = CLIPProcessor.from_pretrained(model_name)
    # Сообщаем об успешном призыве.
    print("...Голем и его Толмач откликнулись на зов.")

    # --- Акт 2: Подготовка Артефактов (ИСПРАВЛЕННЫЙ ПУТЬ) ---
    # Оповещаем о начале загрузки из хранилища.
    print("\nЗагружаем эталонное изображение из хранилища Hugging Face...")
    # Призываем "книгу" 'cifar100' из хранилища, указывая, что нам нужен раздел 'train'.
    # 'streaming=True' - мудрый трюк, чтобы не качать всю "книгу", а брать данные по частям, как из потока.
    ds = load_dataset("cifar100", split="train", streaming=True)

    # Мы должны найти в потоке картинку с нужной нам меткой.
    # Задаем "точную метку" (fine_label) для класса 'cat', которая в cifar100 равна 20.
    target_label = 20
    # Создаем пустой "сосуд" для хранения нашего изображения.
    cat_image = None
    # 'for example in ds:' - это заклинание, которое перебирает примеры (картинка + метка) из потока данных.
    for example in ds:
        # 'if example['fine_label'] == target_label:' - проверяем, является ли "точная метка" текущей картинки той, что мы ищем.
        if example["fine_label"] == target_label:
            # Если да, извлекаем само изображение, которое хранится под ключом 'img'.
            cat_image = example["img"]
            # 'break' - заклинание "прерви поиск", так как мы нашли то, что искали.
            break

    # Проверка-предохранитель на случай, если что-то пошло не так (например,
    # метка указана неверно).
    if cat_image is None:
        # 'raise ValueError(...)' - заклинание "поднять тревогу", которое аварийно завершит ритуал с сообщением.
        raise ValueError("Не удалось найти изображение кота в датасете!")

    # 'image.convert("RGB")' - важное заклинание-предохранитель. Оно гарантирует, что у картинки 3 цветовых канала.
    image = cat_image.convert("RGB")

    # Создаем "свитки с заклинаниями" - текстовые описания, которые мы будем
    # сравнивать с картинкой.
    text_descriptions = ["фотография кота", "рисунок собаки", "пейзаж с горами"]
    # Оповещаем о подготовке.
    print("Подготовлены артефакты для испытания:")
    # Выводим текстовые гипотезы.
    print(f"- Текстовые гипотезы: {text_descriptions}")

    # --- Акт 3: Магия Сопоставления ---
    # Мы передаем Толмачу картинку и все текстовые гипотезы разом.
    # 'padding=True' - руна, говорящая "если тексты разной длины, дополни короткие специальными токенами".
    # '.to(DEVICE)' - немедленно отправляем подготовленные данные на наш магический алтарь.
    inputs = processor(
        text=text_descriptions, images=image, return_tensors="pt", padding=True
    ).to(DEVICE)

    # Отправляем подготовленные данные в "разум" Голема CLIP.
    # '**inputs' - магическая руна "распаковки", которая передает содержимое словаря 'inputs' как именованные аргументы.
    outputs = model(**inputs)
    # Из вывода голема мы извлекаем 'logits_per_image' - это "сырая" оценка схожести.
    logits_per_image = outputs.logits_per_image
    # Применяем заклинание 'softmax', чтобы превратить сырые оценки в понятные вероятности (от 0 до 1).
    # 'dim=1' указывает, по какому измерению применять softmax (вдоль списка наших гипотез).
    probs = logits_per_image.softmax(dim=1)

    # --- Акт 4: Оглашение Вердикта ---
    # Сообщаем о результате.
    print("\n--- Вердикт Магического Компаса ---")
    # Извлекаем данные из тензора: '.cpu()' - вернуть на Разум, '.detach()' - отвязать от графов вычислений, '.numpy()' - превратить в массив.
    # '[0]' - так как у нас была всего одна картинка, мы берем результаты для нее.
    probabilities = probs.cpu().detach().numpy()[0]

    # Проходим по каждой гипотезе и ее вероятности одновременно с помощью духа 'zip'.
    for description, prob in zip(text_descriptions, probabilities):
        # Выводим результат. ':.2%' - магическое форматирование, превращающее 0.99
        # в "99.00%".
        print(f"- Схожесть с '{description}': {prob:.2%}")

    # Финальное напутствие.
    print("\nРитуал завершен. Компас указал на истинный смысл.")
