# Великий Кодекс Техномагии
# Свиток 22: Магический Компас
# Квест 22.2: Поиск по описанию

# --- Часть I: Импорт Магических Гримуаров ---

# Призываем 'torch' - наш Источник Маны.
import torch

# Призываем гримуар 'datasets' для надежного и вечного доступа к данным.
from datasets import load_dataset

# Из гримуара 'transformers' призываем чертежи нашего мультимодального голема CLIP и его Толмача.
from transformers import CLIPModel, CLIPProcessor

# Призываем 'Pillow' (PIL) - духа, умеющего работать с изображениями.


# Призываем 'numpy' (np) - для удобной работы с числовыми массивами.


# --- Часть II: Подготовка к Ритуалу ---

# Определяем устройство ('cuda' - Кристалл Маны GPU, 'cpu' - Разум CPU), где будет вершиться магия.
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
# Оповещаем о выбранном устройстве.
print(f"Магия будет вершиться на устройстве: {DEVICE}")

# --- Часть III: Главный Ритуал Поиска ---
# Эта конструкция ('if __name__ == "__main__":') - священное начало любого пергамента.
if __name__ == "__main__":
    # --- Акт 1: Призыв Мультимодального Голема CLIP ---
    # Задаем имя чертежа, по которому будет призван наш голем.
    model_name = "openai/clip-vit-base-patch32"
    # Оповещаем о начале призыва.
    print(f"Призываем могущественного голема '{model_name}'...")
    # Призываем самого Голема CLIP по его имени и отправляем на магический алтарь.
    model = CLIPModel.from_pretrained(model_name).to(DEVICE)
    # Призываем его верного "Толмача" (Processor).
    processor = CLIPProcessor.from_pretrained(model_name)
    # Сообщаем об успешном призыве.
    print("...Голем и его Толмач откликнулись на зов.")

    # --- Акт 2: Создание "Галереи Артефактов" ---
    # Оповещаем о начале сбора галереи.
    print("\nСоздаем 'Галерею Артефактов' для поиска...")
    # Призываем "книгу" 'cifar100' из хранилища.
    ds = load_dataset("cifar100", split="train", streaming=True)

    # Задаем "заказ": мы хотим найти по одному изображению для каждого из этих классов.
    # Это словарь, где ключ - это метка, а значение - имя класса.
    labels_to_find = {20: "кот", 35: "рыба", 86: "трактор", 72: "тюльпан"}
    # Создаем "сосуд", где будем хранить найденные артефакты (картинки и их истинные имена).
    gallery = {}
    # Начинаем перебирать примеры из потока данных.
    for example in ds:
        # Извлекаем метку текущего примера.
        label = example["fine_label"]
        # Проверяем, есть ли эта метка в нашем "заказе".
        if label in labels_to_find:
            # Если да, извлекаем изображение.
            image = example["img"]
            # Сохраняем изображение и его имя в нашу галерею.
            gallery[labels_to_find[label]] = image
            # Удаляем найденную метку из "заказа", чтобы не искать ее снова.
            del labels_to_find[label]
            # Сообщаем о находке.
            print(f"- Найден артефакт: '{list(gallery.keys())[-1]}'")
        # Если "заказ" выполнен (мы нашли все, что хотели), прерываем поиск.
        if not labels_to_find:
            # 'break' - заклинание "прерви цикл".
            break

    # Сообщаем о завершении сбора.
    print("...Галерея собрана.")

    # --- Акт 3: Индексация Галереи (Вычисление Аур) ---
    # Это медленный этап, который выполняется один раз.
    print("\nНачинаем индексацию галереи (вычисляем ауры изображений)...")
    # Извлекаем только изображения из нашей галереи.
    gallery_images = [img.convert("RGB") for img in gallery.values()]
    # Толмач подготавливает все изображения разом.
    image_inputs = processor(
        images=gallery_images, return_tensors="pt", padding=True
    ).to(DEVICE)
    # Голем вычисляет "ауры" для всех изображений и сохраняет их.
    # '.get_image_features' - специальное заклинание CLIP для получения только аур изображений.
    image_embeddings = model.get_image_features(**image_inputs)
    # Сообщаем о завершении индексации.
    print("...Индексация завершена. Ауры всех артефактов записаны.")

    # --- Акт 4: Магический Поиск ---
    # Это быстрый этап, который можно повторять много раз.
    # Наше "заклинание-запрос", которое мы хотим найти в галерее.
    search_query = "маленький котенок"
    # Оповещаем о начале поиска.
    print(f"\nИспользуем Магический Компас для поиска по запросу: '{search_query}'")
    # Толмач подготавливает наш текстовый запрос.
    text_inputs = processor(text=[search_query], return_tensors="pt", padding=True).to(
        DEVICE
    )
    # Голем вычисляет "ауру" для нашего запроса.
    text_embedding = model.get_text_features(**text_inputs)

    # --- Акт 5: Оглашение Вердикта ---
    # Главное заклинание поиска: вычисляем "резонанс" между аурой текста и КАЖДОЙ аурой из нашей галереи.
    # '@' - это руна матричного умножения, самый эффективный способ посчитать все резонансы разом.
    # '.T' - руна транспонирования, технический трюк для правильного умножения.
    similarities = (image_embeddings @ text_embedding.T).squeeze()
    # 'squeeze()' - убирает лишние измерения из тензора.

    # 'torch.argmax(similarities)' - заклинание, которое находит ИНДЕКС самого большого резонанса.
    best_match_idx = torch.argmax(similarities).item()
    # Получаем имя класса, соответствующее найденному индексу.
    best_match_name = list(gallery.keys())[best_match_idx]

    # Сообщаем о результате.
    print("\n--- Вердикт Магического Компаса ---")
    # Выводим имя найденного артефакта.
    print(f"Компас указывает на артефакт: '{best_match_name}'")
    # Финальное напутствие.
    print("\nРитуал завершен. Сокровище найдено.")
