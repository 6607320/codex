"""Квест 20.1: Сбор данных о времени.

Этот пергамент открывает "Свиток Предсказателя Будущего". Его главная цель
(МАКРО-контекст) — научиться программно генерировать синтетические данные
для обучения и тестирования моделей временных рядов.

Вместо того чтобы брать хаотичные данные из реального мира, мы поступаем
как Архимаги — творим время сами. Мы создаем идеальный "учебник",
программно сплетая воедино три его фундаментальных компонента:
1.  Тренд (общий рост или падение).
2.  Сезонность (периодические колебания).
3.  Шум (случайные капризы судьбы).

Этот квест дает полный контроль и понимание структуры данных, что является
ключевым навыком для отладки предсказательных моделей.
"""

# 'matplotlib.pyplot' (plt) - наш верный "магический художник"
#  для визуализации данных и создания графиков.
import matplotlib.pyplot as plt

# --- Часть I: Импорт Магических Гримуаров ---
# 'numpy' (np) - наш магический калькулятор для создания числовых потоков
#  и работы с массивами.
import numpy as np

# 'pandas' (pd) - гримуар для работы с "летописями времени".
# Он позволяет удобно хранить данные с датами в табличной форме.
import pandas as pd

# --- Часть II: Главный Ритуал Сотворения Времени ---
# Эта конструкция ('if __name__ == "__main__":') - священное начало любого пергамента.
# Она гарантирует, что код внутри исполнится только при прямом запуске файла.
if __name__ == "__main__":
    # Оповещение о начале ритуала.
    print("Начинаем ритуал сотворения 'Летописи Времени'...")

    # --- Акт 1: Определение временного горизонта ---
    # Задаем, на сколько шагов во времени мы хотим заглянуть. 365 дней - один
    # магический год.
    num_steps = 365
    # Создаем ось времени - простой массив чисел от 0 до 364 с помощью
    # заклинания 'arange' из гримуара numpy.
    time = np.arange(num_steps)
    # Сообщаем о длительности нашей будущей летописи.
    print(f"Летопись будет длиться {num_steps} дней.")

    # --- Акт 2: Создание магических потоков ---
    # 1. Тренд: Великий Поток. Простая линия, идущая вверх, имитирующая постоянный рост.
    # Мы умножаем каждый день (0, 1, 2...) на небольшой коэффициент 0.1, чтобы
    # рост был плавным.
    trend = 0.1 * time
    # Сообщаем о сотворении первого компонента.
    print("-> Сотворен 'Великий Поток' (Тренд)...")

    # 2. Сезонность: Циклы Луны. Используем синусоиду для имитации годовых циклов.
    # 'time / 365 * 2 * np.pi' - формула, которая заставляет синус совершить
    #  один полный оборот за 365 шагов.
    # Умножаем результат на 10, чтобы сделать "колебания" более заметными
    # (амплитуда).
    seasonality = 10 * np.sin(time / 365 * 2 * np.pi)
    # Сообщаем о сотворении второго компонента.
    print("-> Сотворены 'Циклы Луны' (Сезонность)...")

    # 3. Шум: Капризы Судьбы. Создаем случайные, непредсказуемые колебания.
    # 'np.random.normal' - заклинание, создающее шум,
    # распределенный по "закону Гаусса" (большинство значений около нуля).
    # '0' - среднее значение шума, '2' - его "разброс" (стандартное отклонение),
    #  'size' - количество точек шума.
    noise = np.random.normal(0, 2, size=len(time))
    # Сообщаем о добавлении третьего компонента.
    print("-> Добавлены 'Капризы Судьбы' (Шум)...")

    # --- Акт 3: Сплетение потоков в единую Летопись ---
    # Мы складываем все три компонента (Тренд, Сезонность и Шум)
    #  для каждой точки времени,
    # чтобы получить финальный, реалистично выглядящий временной ряд.
    time_series_values = trend + seasonality + noise
    # Сообщаем об успешном объединении.
    print("-> Все потоки сплетены в единую Летопись Времени.")

    # --- Акт 4: Запись Летописи на священный пергамент (Pandas DataFrame) ---
    # С помощью гримуара 'pandas' создаем последовательность дат.
    # 'start' - начальная дата, 'periods' - количество дней,
    #  которое нужно сгенерировать.
    dates = pd.date_range(start="2024-01-01", periods=num_steps)

    # Создаем DataFrame - магическую таблицу.
    # Это словарь, где ключи ('date', 'value') станут названиями колонок, а
    # значения - их содержимым.
    df = pd.DataFrame({"date": dates, "value": time_series_values})
    # Сообщаем о создании таблицы.
    print("-> Летопись облечена в форму магической таблицы (DataFrame).")

    # --- Акт 5: Материализация артефактов ---
    # Задаем имя для нашего файла с данными.
    csv_filename = "time_series_data.csv"
    # Приказываем нашей таблице 'df' сохранить себя в CSV-файл с указанным именем.
    # 'index=False' - важная руна, которая говорит
    #  "не сохраняй внутренние номера строк pandas в файл".
    df.to_csv(csv_filename, index=False)
    # Сообщаем об успешном сохранении данных.
    print(f"-> Летопись сохранена в материальный артефакт: {csv_filename}")

    # Визуализируем нашу Летопись, чтобы увидеть ее красоту.
    # 'plt.figure' - создаем "холст" для нашего художника, задавая его размер.
    plt.figure(figsize=(12, 6))
    # 'plt.plot' - главная команда "нарисуй линию",
    #  соединяющую точки (даты по оси X, значения по оси Y).
    plt.plot(df["date"], df["value"])
    # 'plt.title' - добавляем заголовок нашему рисунку.
    plt.title("Сотворенная Летопись Времени")
    # 'plt.xlabel' - подписываем ось X.
    plt.xlabel("Дата")
    # 'plt.ylabel' - подписываем ось Y.
    plt.ylabel("Значение")
    # 'plt.grid(True)' - добавляем сетку на фон для лучшего восприятия.
    plt.grid(True)

    # Задаем имя для нашего файла с графиком.
    plot_filename = "time_series_plot.png"
    # Приказываем художнику 'plt' сохранить получившийся рисунок в файл.
    plt.savefig(plot_filename)
    # Сообщаем об успешном сохранении графика.
    print(f"-> Визуальный отпечаток Летописи сохранен как: {plot_filename}")

    # Финальное сообщение об успешном завершении всего ритуала.
    print(
        "\nРитуал завершен. Два артефакта успешно созданы в вашей мастерской."
    )
