"""Квест 10.1: Создание руны "Свертки".

Этот пергамент открывает "Свиток Рун Зрения" и демистифицирует
фундаментальный "атом" всех "Всевидящих Очей" — свертку (convolution).
Его главная цель (МАКРО-контекст) — понять механику этого процесса,
реализовав его вручную, без магии PyTorch.

Мы используем аналогию с "фонарем и трафаретом". Мы создаем "трафарет"
(ядро), предназначенный для поиска вертикальных линий, и вручную
"сканируем" им наш тестовый образ. Результатом является "карта признаков",
на которой подсвечены места, где "трафарет" нашел совпадение. Этот квест
доказывает, что свертка — это простая, повторяющаяся операция "умножить
и сложить", лежащая в основе всей магии CNN.

1. Образ - это темная комната, которую нужно исследовать.
2. Ядро (kernel) - это "трафарет" на нашем фонаре, ищущий определенный узор.
3. Свертка - это процесс сканирования комнаты лучом фонаря.
4. Карта Признаков (feature map) - это карта комнаты, где отмечены места,
   где фонарь вспыхнул, найдя нужный узор.
"""

# Мы призываем могущественный гримуар `cv2` (OpenCV), известный как "Набор
# Кинематографиста".
import cv2

# Мы призываем помощника `numpy` для математических операций с нашими
# "комнатами" и "трафаретами".
import numpy as np

# --- Акт 1: Создание "Комнаты" (Тестовый Образ) ---
# Начинается первый акт: мы создаем "темную комнату" для нашего исследования.
# Мы оглашаем на кристалл (консоль) о начале ритуала сотворения.
print("Создаю тестовый образ с вертикальной линией...")
# Мы создаем "комнату" — черно-белый образ размером 7x7 пикселей.
# 0 — это абсолютная тьма (черный), 255 — это яркий свет (белый).
image = np.zeros((7, 7), dtype=np.uint8)
# Мы рисуем в центре нашей "комнаты" яркую вертикальную линию света.
image[:, 3] = 255
# Мы материализуем нашу "комнату", сохраняя ее в виде артефакта на диске.
cv2.imwrite("original_line.png", image)
# Мы сообщаем, что артефакт успешно создан и сохранен.
print("  -> Оригинальный образ сохранен в 'original_line.png'")

# --- Акт 2: Ковка "Магического Трафарета" (Ядро) ---
# Начинается второй акт: мы создаем "трафарет" для нашего "фонаря".
# Мы оглашаем, что начинаем ковку нашего "трафарета".
print("\nВыковываю 'трафарет' для поиска вертикальных линий...")
# Это ядро (фильтр Собеля) специально создано для поиска вертикальных границ.
# -1 слева и +1 справа: он будет "вспыхивать" (давать большое значение),
# когда слева от центра темно, а справа — светло (вертикальный переход).
kernel = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
# Мы оглашаем, что наш "трафарет" готов к ритуалу.
print("  -> Трафарет готов.")

# --- Акт 3: Ритуал "Сканирования" (Ручная Свертка) ---
# Начинается третий, кульминационный акт: мы сканируем "комнату" нашим "фонарем".
# Мы оглашаем на кристалл о начале ритуала сканирования.
print("\nНачинаю ритуал сканирования образа трафаретом...")
# Мы вычисляем размеры будущей "Карты Признаков". Она будет чуть меньше
# оригинала, так как "фонарь" не может выходить за края.
output_height = image.shape[0] - kernel.shape[0] + 1
# Мы вычисляем ширину будущей "Карты".
output_width = image.shape[1] - kernel.shape[1] + 1
# Мы создаем пустую, темную "Карту", которую будем заполнять "вспышками".
feature_map = np.zeros((output_height, output_width))

# Мы начинаем сканировать: двигаем наш "фонарь" (окно 3х3) по всему образу.
# Мы начинаем цикл по вертикали, двигая "фонарь" сверху вниз.
for y in range(output_height):
    # Мы начинаем вложенный цикл по горизонтали, двигая "фонарь" слева направо.
    for x in range(output_width):
        # Мы "вырезаем" окно из "комнаты", на которое сейчас светит "фонарь".
        window = image[y: y + 3, x: x + 3]

        # ГЛАВНАЯ МАГИЯ: Мы прикладываем "трафарет" к освещенному окну.
        # Мы поэлементно умножаем числа в окне на числа в "трафарете",
        # а затем суммируем результат. Это и есть операция свертки.
        convolved_value = np.sum(window * kernel)

        # Мы записываем "яркость вспышки" в нашу "Карту Признаков".
        feature_map[y, x] = convolved_value

# Мы оглашаем, что ритуал сканирования завершен.
print("Сканирование завершено.")

# --- Акт 4: Анализ "Карты Признаков" ---
# Финальный акт: мы изучаем результаты нашего сканирования.
# Мы нормализуем результат, чтобы его можно было сохранить как картинку
# (переводим значения в диапазон 0-255).
feature_map_visual = cv2.normalize(
    # Что нормализовать.
    feature_map,
    # Куда (None означает создать новый массив).
    None,
    # Минимальное значение нового диапазона.
    0,
    # Максимальное значение нового диапазона.
    255,
    # Тип нормализации (растянуть от min до max).
    cv2.NORM_MINMAX,
    # Тип данных для выходного образа.
    dtype=cv2.CV_8U,
)
# Мы материализуем нашу "Карту Признаков", сохраняя ее как артефакт.
cv2.imwrite("feature_map.png", feature_map_visual)
# Мы оглашаем, что ритуал успешно завершен.
print("\nМагия свершилась! 'Карта Признаков' сохранена в 'feature_map.png'.")
# Мы даем наставление Магу-Техноманту, как правильно истолковать результат.
print(
    "Открой ее и обрати внимание, как ярко подсвечена именно та область, "
    "где в оригинале была вертикальная линия."
)
