# === quest_16_1.py ===
# Имя этого пергамента, хранящего ритуал первой записи в "Хронограф".
# Квест: 16.1 - Настройка "Хронографа"
# Каноническое имя Квеста, как оно записано в Великом Кодексе.
# Цель: Установить и запустить MLflow - наш "Лабораторный Журнал"
# Священная цель нашего ритуала.
# для отслеживания экспериментов. Мы сделаем первую, простейшую запись,
# Детальное описание цели.
# чтобы понять основные заклинания: log_param, log_metric, log_artifact.
# Указание на ключевые заклинания, которые мы изучим.

# --- Акт 1: Подготовка Гримуаров ---
# Начинается первый акт: мы призываем все необходимые знания и инструменты.
# Мы призываем наш новый гримуар "Хронограф" (`mlflow`).
import mlflow

# --- Акт 2: Настройка "Лабораторного Журнала" ---
# Начинается второй акт: мы готовим наш "Хронограф" к работе.

# `mlflow.set_tracking_uri(...)` — это заклинание, которое говорит MLflow,
# ГДЕ именно хранить свой "журнал". Мы указываем ему создать папку 'mlruns'
# в текущей директории. `file://` — протокол для локального хранения.
# `os.path.abspath` — получает полный, абсолютный путь.
# Примечание: Этот шаг необязателен, MLflow по умолчанию и так создаст 'mlruns' здесь.
# `mlflow.set_tracking_uri("file://" + os.path.abspath("mlruns"))`
# Каждый проект в MLflow — это "Эксперимент". Это как отдельная книга в библиотеке.
# `mlflow.set_experiment()` — это заклинание, которое "выбирает книгу для записи"
# или создает новую, если ее еще нет.
# Мы даем имя нашему первому "Эксперименту".
experiment_name = "Первый Свиток Хроник"
# Мы произносим заклинание, чтобы выбрать или создать этот "Эксперимент".
mlflow.set_experiment(experiment_name)

# Мы сообщаем Магу о том, что настройка завершена.
print("Магический 'Хронограф' (MLflow) настроен.")
# Мы указываем, в какую "книгу" будут делаться записи.
print(f"Все записи будут сохраняться в эксперимент: '{experiment_name}'")

# --- Акт 3: Ритуал "Первой Записи" ---
# Начинается третий, кульминационный акт: мы делаем нашу первую запись.

# `with mlflow.start_run(...)` — это главное заклинание для начала записи.
# Оно говорит: "Я начинаю новый ритуал! Открой новую, чистую страницу в журнале".
# `run_name` — это имя, которое мы даем этой конкретной "странице" (запуску).
# `with` — конструкция, которая гарантирует, что когда ритуал закончится (код выйдет из этого блока),
# страница будет автоматически "закрыта и сохранена".
with mlflow.start_run(run_name="Пробный Ритуал"):
    # Мы оглашаем на кристалл (консоль) о начале записи.
    print("\nНачинаю 'Пробный Ритуал' и делаю записи в журнал...")

    # --- Запись "Ингредиентов" (Гиперпараметров) ---
    # `mlflow.log_param()` — это заклинание, которое записывает на страницу ПАРАМЕТР.
    # Параметр — это "настройка" твоего ритуала, которую ТЫ задаешь (например, скорость обучения).
    # Первый аргумент — имя параметра (строка), второй — его значение.
    mlflow.log_param("скорость_обучения", 0.01)
    # Мы записываем второй параметр.
    mlflow.log_param("количество_эпох", 100)

    # --- Запись "Результатов" (Метрик) ---
    # `mlflow.log_metric()` — это заклинание, которое записывает на страницу МЕТРИКУ.
    # Метрика — это "измерение", результат работы твоего ритуала (например, ошибка).
    # Метрики можно записывать много раз за один ритуал, создавая график.
    # Первый аргумент — имя метрики, второй — ее значение, третий
    # (необязательный) — "шаг".
    mlflow.log_metric("ошибка", 0.3441, step=10)
    # Мы записываем второе значение той же метрики, но на другом "шаге".
    mlflow.log_metric("ошибка", 0.0483, step=100)

    # --- Сохранение "Артефактов" ---
    # Артефакт — это любой файл, который ты хочешь прикрепить к своей "странице" журнала.
    # Сначала мы создаем сам файл.
    with open("spell.txt", "w") as f:
        # Мы записываем в этот файл строку текста.
        f.write("Это было заклинание 'Перегонки Знаний'.")

    # `mlflow.log_artifact()` — приказывает "Хронографу" взять файл с диска
    # и скопировать его внутрь "страницы" журнала.
    # `artifact_path="свитки"` — говорит, что внутри страницы артефакт
    # нужно положить в подпапку "свитки".
    mlflow.log_artifact("spell.txt", artifact_path="свитки")

    # Мы оглашаем об успехе.
    print("Все записи сделаны, артефакты сохранены.")

# --- Акт 4: Инструкция по Пробуждению "Магического Зеркала" ---
# Начинается финальный акт: мы даем инструкцию, как просмотреть наши записи.

# Мы сообщаем, что ритуал записи завершен.
print("\nРитуал завершен!")
# Мы даем Магу-Техноманту точную инструкцию, как посмотреть на результаты
# своей работы.
print(
    "\nЧтобы увидеть свои хроники, останови этот скрипт (если он не остановился сам),"
)
# Мы продолжаем инструкцию.
print("и в ЭТОМ ЖЕ терминале произнеси заклинание:")
# `mlflow ui` — это отдельная команда для терминала, которая запускает веб-сервер.
print("mlflow ui")
# Мы объясняем, что делать дальше.
print(
    "\nЗатем открой в браузере адрес, который он тебе покажет (обычно http://12.0.0.1:5000)."
)
