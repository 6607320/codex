# === quest_15_1.py ===
# Имя этого пергамента, хранящего ритуал создания нашего собственного конвейера данных.
# Квест: 15.1 - Создание собственного загрузчика
# Каноническое имя Квеста, как оно записано в Великом Кодексе.
# Цель: Научиться создавать кастомные классы Dataset и DataLoader в PyTorch.
# Священная цель нашего ритуала.
# Это позволяет работать с данными любого формата и размера, даже если они
# Детальное описание цели.
# не помещаются в оперативную память, организуя "ленивую" загрузку.
# Указание на важность этого знания.

# --- Акт 1: Подготовка Гримуаров ---
# Начинается первый акт: мы призываем все необходимые знания и инструменты.

# Мы призываем помощника `glob` для "умного" поиска файлов по шаблонам.
import glob

# Мы призываем "Духа-Архивариуса" (`os`), который знает всё о файлах и папках.
import os

# Из гримуара `Pillow` мы призываем заклинание `Image` для открытия изображений.
from PIL import Image

# Из раздела `torch.utils.data` мы призываем два главных чертежа для работы с данными.
from torch.utils.data import DataLoader, Dataset

# Мы призываем гримуар `transforms` из `torchvision` для создания "линз".
from torchvision import transforms

# --- Акт 2: Чертеж "Хранителя Свитков" (CustomImageDataset) ---
# Начинается второй, самый важный акт: мы создаем "чертеж" для нашего Хранителя.
# Мы создаем "чертеж" (класс) для нашего Хранителя.
# Он наследует (`Dataset`) всю базовую магию от PyTorch для работы с данными.


class CustomImageDataset(Dataset):

    # Мы определяем заклинание Инициализации (`__init__`), которое срабатывает при сотворении Хранителя.
    # Его задача — создать "каталог" нашей библиотеки и запомнить "линзы".
    def __init__(self, directory, transform=None):
        # `glob.glob(...)` — это заклинание поиска. `'directory/*.png'` находит все файлы
        # с расширением `.png` в указанной папке. Результат (список путей)
        # мы сохраняем в "каталог" `self.image_paths`.
        self.image_paths = glob.glob(os.path.join(directory, "*.png"))
        # Мы "запоминаем" конвейер "магических линз", который нам передали.
        self.transform = transform

    # Мы определяем заклинание Подсчета (`__len__`), отвечающее на вопрос "Сколько всего свитков?".
    # Оно должно быть реализовано в любом "Хранителе".
    def __len__(self):
        # `len()` — это стандартное заклинание Python, возвращающее длину списка.
        return len(self.image_paths)

    # Мы определяем заклинание "Принеси-Свиток" (`__getitem__`) — главное заклинание Хранителя.
    # Оно срабатывает, когда "Подносчик" просит свиток под конкретным номером `idx`.
    def __getitem__(self, idx):
        # Хранитель заглядывает в свой "каталог" и берет путь к свитку по его номеру.
        image_path = self.image_paths[idx]
        # Он "вскрывает" свиток, читая изображение с диска.
        # `.convert("RGB")` — на всякий случай превращает его в стандартный 3-канальный формат.
        image = Image.open(image_path).convert("RGB")

        # Мы проверяем, передали ли нам "магические линзы".
        if self.transform:
            # Если да, Хранитель применяет их к только что открытому образу.
            image = self.transform(image)

        # Для простоты этого квеста, мы будем использовать номер свитка как его "метку".
        label = idx
        # Хранитель возвращает два артефакта: обработанный образ и его метку.
        return image, label


# --- Акт 3: Ритуал Сотворения и Использования ---
# Начинается третий акт: мы сотворяем наши артефакты и заставляем их работать.
# Мы оглашаем на кристалл (консоль) о начале сотворения конвейера "линз".
print("Создаю конвейер 'магических линз'...")
# Мы создаем простой конвейер из двух линз.
data_transform = transforms.Compose(
    # Начало списка трансформаций.
    [
        # Первая "линза": изменить размер каждого образа до 64x64.
        transforms.Resize((64, 64)),
        # Вторая "линза": превратить образ из формата Pillow в Тензор PyTorch.
        transforms.ToTensor(),
    # Конец списка трансформаций.
    ]
)

# Шаг 1: Мы сотворяем "Хранителя".
# Мы оглашаем о начале сотворения "Хранителя".
print("Сотворяю 'Хранителя Свитков'...")
# Мы создаем экземпляр нашего "Хранителя" по чертежу `CustomImageDataset`.
# Мы даем ему путь к нашей "библиотеке" ('generated_palette') и наш конвейер "линз".
image_dataset = CustomImageDataset(
    # Путь к "библиотеке".
    directory="generated_palette",
    # Передаем "магические линзы".
    transform=data_transform,
)

# Шаг 2: Мы сотворяем "Подносчика".
# Мы оглашаем о начале сотворения "Подносчика".
print("Сотворяю 'Подносчика'...")
# Мы создаем экземпляр "Подносчика" по чертежу `DataLoader`.
# 1. `image_dataset` — мы даем ему нашего "Хранителя", с которым он будет работать.
# 2. `batch_size=4` — мы приказываем ему носить "свитки" пачками по 4 штуки.
# 3. `shuffle=True` — мы приказываем ему перемешивать "каталог" перед каждым новым "учебным годом" (эпохой).
image_dataloader = DataLoader(image_dataset, batch_size=4, shuffle=True)

# --- Акт 4: Проверка Работы ---
# Начинается финальный акт: мы проверяем, как работает наш конвейер.
# Мы оглашаем, что "Подносчик" начинает свою работу.
print("\n'Подносчик' начинает работу...")
# `iter(image_dataloader)` — создает "конвейер" из нашего "Подносчика".
# `next(...)` — заклинание, которое говорит: "Дай мне один элемент с конвейера".
# В нашем случае, один элемент — это одна "пачка" данных.
first_batch_images, first_batch_labels = next(iter(image_dataloader))

# Мы оглашаем, что первая пачка успешно получена.
print("Первая пачка успешно получена!")
# `.shape` — показывает размеры тензора. Мы ожидаем `(4, 3, 64, 64)` —
# `(4_картинки, 3_канала, 64_высота, 64_ширина)`.
print(f"  Форма тензора с образами: {first_batch_images.shape}")
# Мы печатаем метки, которые соответствуют этим 4-м картинкам.
print(f"  Метки в этой пачке: {first_batch_labels}")
# Мы оглашаем, что ритуал успешно завершен.
print("\nРитуал завершен! Ты создал свой собственный конвейер данных.")
