# === quest_15_2.py ===
# Имя этого пергамента, хранящего ритуал сравнения скорости загрузки данных.
# Квест: 15.2 - "Призыв Духов-Помощников"
# Каноническое имя Квеста, как оно записано в Великом Кодексе.
# Цель: Понять и измерить эффект от использования `num_workers` в DataLoader
# Священная цель нашего ритуала.
# для ускорения "конвейера" подготовки данных. Мы докажем на практике,
# Детальное описание цели.
# что параллельная загрузка значительно быстрее последовательной.
# Указание на ожидаемый результат.

# --- Акт 1: Подготовка Гримуаров ---
# Начинается первый акт: мы призываем все необходимые знания и инструменты.
# Мы призываем помощника `glob` для "умного" поиска файлов по шаблонам.
import glob

# Мы призываем "Духа-Архивариуса" (`os`), который знает всё о файлах и папках.
import os

# Мы призываем гримуар "Хронометра" (`time`) для точного замера времени.
import time

# Мы призываем заклинание `Image` из гримуара "Pillow" для открытия
# изображений.
from PIL import Image

# Из 'torch.utils.data' мы призываем чертежи для "Хранителя" и "Подносчика".
from torch.utils.data import DataLoader, Dataset

# Мы призываем гримуар `transforms` для создания "магических линз".
from torchvision import transforms


# --- Акт 2: Чертеж "Хранителя Свитков" (с искусственной задержкой) ---
# Начинается второй акт: мы создаем "чертеж" для нашего Хранителя.
# Мы используем тот же чертеж, что и в Квесте 15.1.
class CustomImageDataset(Dataset):
    # Мы определяем заклинание Инициализации.
    def __init__(self, directory, transform=None):
        # Он создает "каталог" путей к изображениям.
        self.image_paths = glob.glob(os.path.join(directory, "*.png"))
        # Он запоминает "линзы".
        self.transform = transform

    # Мы определяем заклинание Подсчета.
    def __len__(self):
        # Он возвращает общее количество "свитков".
        return len(self.image_paths)

    # Мы определяем заклинание "Принеси-Свиток".
    def __getitem__(self, idx):
        # Он находит путь к нужному свитку.
        image_path = self.image_paths[idx]
        # Он открывает свиток с диска.
        image = Image.open(image_path).convert("RGB")

        # ВАЖНО: Мы добавляем искусственную задержку.
        # `time.sleep(0.05)` — приказывает ритуалу "заснуть" на 0.05 секунды.
        # Это имитирует сложную и долгую обработку данных
        #  (например, сложную аугментацию),
        # чтобы разница в скорости между режимами была более очевидной.
        time.sleep(0.05)

        # Если есть "линзы", мы их применяем.
        if self.transform:
            # Мы пропускаем образ через "линзы".
            image = self.transform(image)
        # Мы возвращаем результат.
        return image, idx


# --- Акт 3: Подготовка к Эксперименту ---
# Начинается третий акт: мы готовим все необходимое для наших экспериментов.
# Мы создаем конвейер "линз".
data_transform = transforms.Compose(
    [transforms.Resize((64, 64)), transforms.ToTensor()]
)
# Мы сотворяем "Хранителя", передавая ему нашу "библиотеку" и "линзы".
image_dataset = CustomImageDataset(
    # Путь к "библиотеке".
    directory="generated_palette",
    # Передаем "магические линзы".
    transform=data_transform,
)

# --- Акт 4: Эксперимент "Ленивый Подносчик" (Последовательный режим) ---
# Начинается четвертый акт: мы проводим первый эксперимент.
# Мы оглашаем на кристалл (консоль) заголовок для нашего эксперимента.
print("--- Эксперимент 1: Ленивый Подносчик (0 духов-помощников) ---")
# Мы сотворяем "Подносчика" в стандартном, "ленивом" режиме.
# `num_workers=0` — это значение по умолчанию. Оно означает, что основной
# процесс будет сам, последовательно, ходить за каждой пачкой данных.
lazy_dataloader = DataLoader(
    image_dataset, batch_size=4, shuffle=True, num_workers=0
)

# `time.time()` — это заклинание, которое возвращает текущее
#  "магическое время" (в секундах).
start_time = time.time()
# Мы запускаем цикл, который "пролистывает" все пачки данных.
# `_` — означает "мне не важны сами данные, я просто хочу выполнить действие".
for _ in lazy_dataloader:
    # `pass` — это заклинание "ничего не делать".
    pass
# Мы снова замеряем время, чтобы зафиксировать момент окончания.
end_time = time.time()

# Мы выводим разницу между конечным и начальным временем.
print(f"Время выполнения: {end_time - start_time:.4f} секунд")

# --- Акт 5: Эксперимент "Эффективный Подносчик" (Параллельный режим) ---
# Начинается пятый акт: мы проводим второй эксперимент.
# Мы оглашаем заголовок для второго эксперимента.
print("\n--- Эксперимент 2: Эффективный Подносчик (4 духа-помощника) ---")
# Мы сотворяем второго "Подносчика", но с могущественной руной `num_workers=4`.
# Это приказ: "Сотвори 4 отдельных 'духа-помощника' (процесса), которые будут
# в фоновом режиме заранее готовить для меня пачки данных".
efficient_dataloader = DataLoader(
    # Мы указываем того же "Хранителя".
    image_dataset,
    # Мы указываем тот же размер пачки.
    batch_size=4,
    # Мы также перемешиваем данные.
    shuffle=True,
    # Мы призываем 4 "духов-помощников".
    num_workers=4,
)

# Мы снова запускаем хронометр.
start_time = time.time()
# Мы "пролистываем" данные с помощью уже "усиленного" Подносчика.
for _ in efficient_dataloader:
    # Мы снова ничего не делаем в цикле.
    pass
# Мы снова останавливаем хронометр.
end_time = time.time()

# Мы выводим результат второго эксперимента.
print(f"Время выполнения: {end_time - start_time:.4f} секунд")
# Мы оглашаем, что ритуал завершен, и даем наставление.
print(
    "\nРитуал завершен! Сравни время выполнения. Магия параллелизма очевидна."
)
