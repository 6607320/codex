# === quest_15_1.py ===
# Квест: 15.1 - Создание собственного загрузчика
# Цель: Научиться создавать кастомные классы Dataset и DataLoader в PyTorch.
# Это позволяет работать с данными любого формата и размера, даже если они
# не помещаются в оперативную память, организуя "ленивую" загрузку.

# --- Акт 1: Подготовка Гримуаров ---

# Призываем помощника 'glob' для "умного" поиска файлов.
import glob

# Призываем помощника 'os' для работы с путями.
import os

# Из гримуара 'Pillow' призываем заклинание для открытия изображений.
from PIL import Image

# Из раздела 'torch.utils.data' призываем два главных чертежа для работы с данными.
from torch.utils.data import DataLoader, Dataset

# Призываем гримуар 'transforms' из 'torchvision' для создания "линз".
from torchvision import transforms

# --- Акт 2: Чертеж "Хранителя Свитков" (CustomImageDataset) ---
# Создаем "чертеж" (класс) для нашего Хранителя.
# Он наследует (`Dataset`) всю базовую магию от PyTorch для работы с данными.


class CustomImageDataset(Dataset):

    # Заклинание Инициализации (`__init__`): срабатывает при сотворении Хранителя.
    # Его задача - создать "каталог" нашей библиотеки и запомнить "линзы".
    def __init__(self, directory, transform=None):
        # glob.glob(...) - заклинание поиска. 'directory/*.png' находит все файлы
        # с расширением .png в указанной папке. Результат (список путей)
        # мы сохраняем в "каталог" self.image_paths.
        self.image_paths = glob.glob(os.path.join(directory, "*.png"))
        # Мы "запоминаем" конвейер "магических линз", который нам передали.
        self.transform = transform

    # Заклинание Подсчета (`__len__`): отвечает на вопрос "Сколько всего свитков?".
    # Должно быть реализовано в любом "Хранителе".
    def __len__(self):
        # len() - стандартное заклинание Python, возвращающее длину списка.
        return len(self.image_paths)

    # Заклинание "Принеси-Свиток" (`__getitem__`): главное заклинание Хранителя.
    # Срабатывает, когда "Подносчик" просит свиток под конкретным номером `idx`.
    def __getitem__(self, idx):
        # Хранитель заглядывает в свой "каталог" и берет путь к свитку по его номеру.
        image_path = self.image_paths[idx]
        # Он "вскрывает" свиток, читая изображение с диска.
        # .convert("RGB") - на всякий случай превращает его в стандартный 3-канальный формат.
        image = Image.open(image_path).convert("RGB")

        # Мы проверяем, передали ли нам "магические линзы".
        if self.transform:
            # Если да, Хранитель применяет их к только что открытому образу.
            image = self.transform(image)

        # Для простоты этого квеста, мы будем использовать номер свитка как его "метку".
        label = idx
        # Хранитель возвращает два артефакта: обработанный образ и его метку.
        return image, label


# --- Акт 3: Ритуал Сотворения и Использования ---
print("Создаю конвейер 'магических линз'...")
# Создаем простой конвейер из двух линз.
data_transform = transforms.Compose(
    [
        # 1. Изменить размер каждого образа до 64x64.
        transforms.Resize((64, 64)),
        # 2. Превратить образ из формата Pillow в Тензор PyTorch.
        transforms.ToTensor(),
    ]
)

# Шаг 1: Сотворяем "Хранителя".
print("Сотворяю 'Хранителя Свитков'...")
# Мы создаем экземпляр нашего "Хранителя" по чертежу CustomImageDataset.
# Мы даем ему путь к нашей "библиотеке" ('generated_palette') и наш конвейер "линз".
image_dataset = CustomImageDataset(
    directory="generated_palette", transform=data_transform
)

# Шаг 2: Сотворяем "Подносчика".
print("Сотворяю 'Подносчика'...")
# Мы создаем экземпляр "Подносчика" по чертежу DataLoader.
# 1. image_dataset - даем ему нашего "Хранителя", с которым он будет работать.
# 2. batch_size=4 - приказываем ему носить "свитки" пачками по 4 штуки.
# 3. shuffle=True - приказываем ему перемешивать "каталог" перед каждым новым "учебным годом" (эпохой).
image_dataloader = DataLoader(image_dataset, batch_size=4, shuffle=True)

# --- Акт 4: Проверка Работы ---
print("\n'Подносчик' начинает работу...")
# iter(image_dataloader) - создает "конвейер" из нашего "Подносчика".
# next(...) - заклинание, которое говорит: "Дай мне один элемент с конвейера".
# В нашем случае, один элемент - это одна "пачка" данных.
first_batch_images, first_batch_labels = next(iter(image_dataloader))

print("Первая пачка успешно получена!")
# .shape показывает размеры тензора. Мы ожидаем (4, 3, 64, 64) -
# (4_картинки_в_пачке, 3_цветовых_канала, 64_высота, 64_ширина).
print(f"  Форма тензора с образами: {first_batch_images.shape}")
# Печатаем метки, которые соответствуют этим 4-м картинкам.
print(f"  Метки в этой пачке: {first_batch_labels}")
print("\nРитуал завершен! Ты создал свой собственный конвейер данных.")
