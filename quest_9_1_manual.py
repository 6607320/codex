# === quest_9_1_manual.py ===
# Квест: 9.1 - Версия "Истинный Ручной Режим"
# Цель: Понять магию градиентного спуска ("пристрелки"), реализовав
# ее на простых числах.

# --- Легенда Квеста: Аналогия с "Магическим Луком" ---
# Представь, что у нас есть лук, который должен всегда попадать в отметку "5".
# У лука есть две "настроечные руны":
#  1. w (Сила Натяжения)
#  2. b (Поправка на Ветер)
# Наша задача - "пристрелять" лук, т.е. правильно настроить эти руны,
# делая выстрелы и корректируя настройки после каждого промаха.
# Этот скрипт - это ручная симуляция такой "пристрелки".

# --- Акт 1: Подготовка к Ритуалу ---

# Исходные данные:
# Наша эталонная "мишень", куда мы целимся.
x = 2.0
# "Центр мишени", истинное значение, в которое мы должны попасть.
y = 5.0

# "Руны" на нашем луке, изначально сбиты на ноль.
w = 0.0 # Сила Натяжения
b = 0.0 # Поправка на Ветер

# "Скорость обучения" - насколько сильно мы поворачиваем "руны" за один раз.
learning_rate = 0.01

print("Начальная калибровка Лука: w=0.0, b=0.0")
print(f"Цель: для мишени x={x} попасть в центр y={y}")
print("-" * 30)

# --- Акт 2: Ритуал "Пристрелки" (15 выстрелов) ---
for epoch in range(15):
    # --- Шаг 1: Выстрел (Прямой проход) ---
    # Делаем выстрел по формуле: попадание = (мишень * сила_натяжения) + поправка_на_ветер
    y_predicted = w * x + b

    # --- Шаг 2: Измерение "Промаха" (Ошибка / Loss) ---
    # Считаем, насколько далеко стрела от центра мишени.
    loss = (y_predicted - y)**2
    
    # --- Шаг 3: "Магический Шепот" (Вычисление Градиентов) ---
    # Лук волшебным образом "шепчет" нам, как именно нужно подкрутить руны,
    # чтобы следующий выстрел был точнее. Это и есть backpropagation.
    
    # ПРИМЕР РАСЧЕТА ДЛЯ ПЕРВОГО ВЫСТРЕЛА (epoch=1):
    # y_predicted = 0.0, y = 5.0, x = 2.0
    #
    # 1. grad_y_predicted (общая сила промаха) = 2 * (0.0 - 5.0) = -10.0
    #
    # 2. grad_w (шепот для 'w') = общая_сила_промаха * влияние_мишени
    #                          = -10.0 * 2.0 = -20.0
    #    (Шепот: "Нужно ОЧЕНЬ СИЛЬНО увеличить натяжение!")
    #
    # 3. grad_b (шепот для 'b') = общая_сила_промаха * 1
    #                          = -10.0 * 1 = -10.0
    #    (Шепот: "Нужно немного увеличить поправку на ветер.")
    
    grad_w = 2 * (y_predicted - y) * x
    grad_b = 2 * (y_predicted - y) * 1

    # --- Шаг 4: Коррекция (Обновление "рун" лука) ---
    # Мы "подкручиваем" руны в сторону, ПРОТИВОПОЛОЖНУЮ шепоту ошибки.
    
    # ПРИМЕР РАСЧЕТА ДЛЯ ПЕРВОГО ВЫСТРЕЛА:
    # w = 0.0 - 0.01 * (-20.0) = 0.2
    # b = 0.0 - 0.01 * (-10.0) = 0.1
    
    w = w - learning_rate * grad_w
    b = b - learning_rate * grad_b
    
    # --- Отчет о выстреле ---
    print(f"Выстрел {epoch + 1}: Попадание={y_predicted:.4f}, Промах={loss:.4f}, w={w:.4f}, b={b:.4f}")

# --- Акт 3: Финальный Результат ---
print("-" * 30)
print(f"Финальная калибровка Лука: w={w:.4f}, b={b:.4f}")
print(f"Финальный выстрел по мишени x={x}: {(w * x + b):.4f}")