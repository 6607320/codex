# === quest_2_2.py ===
# Квест: 2.2 - Расшифровка аудио-послания
# Цель: Использовать наше "Ухо Всеслышания" для реальной задачи - транскрибирования
# (превращения в текст) настоящего аудиофайла, полученного из архива.

# --- Акт 1: Подготовка Гримуаров ---

# Призываем "Библиотекаря" (load_dataset) для надежного получения данных.
from datasets import load_dataset

# Призываем "амулет" pipeline для легкого использования модели.
from transformers import pipeline

# --- Акт 2: Призыв Аудио-Послания ---

# Сообщаем о начале ритуала.
print("Обращаюсь к древнему, проверенному архиву 'librispeech_asr'...")

# Используем load_dataset для открытия "портала" к архиву.
# 1. "librispeech_asr" - Имя архива. Это классический, проверенный временем датасет.
# 2. "clean" - Мы просим "чистую" версию записей, без фоновых шумов.
# 3. split="test" - Мы берем данные из тестовой (обычно самой маленькой) части.
# 4. streaming=True - Ключевая руна экономии! Мы не скачиваем весь архив, а открываем
#    к нему "поток", чтобы брать данные по одному.
dataset = load_dataset(
    "librispeech_asr", "clean", split="test", streaming=True, trust_remote_code=True
)

# next(iter(dataset)) - это заклинание, которое говорит: "Возьми из потока
# самый первый попавшийся образец". Мы сохраняем его в 'sample'.
sample = next(iter(dataset))

# Внутри 'sample' находится словарь. Нас интересует его часть под ключом "audio".
# В 'audio' лежат и сами аудиоданные, и их "паспорт" (частота).
audio_input = sample["audio"]

# Сообщаем, что "говорящий кристалл" успешно получен.
print("Аудио-послание успешно призвано!")

# --- Акт 3: Ритуал Расшифровки ---

# Сообщаем о призыве "Уха". Так как модель уже скачана, это произойдет мгновенно.
print("\nПризываю 'Ухо Всеслышания'...")
transcriber = pipeline(
    "automatic-speech-recognition", model="openai/whisper-tiny", device_map="auto"
)

# Сообщаем о начале анализа.
print("\nГотовлюсь расшифровать послание...")

# "Скармливаем" нашему "амулету" (transcriber) не имя файла, а сами
# аудиоданные (audio_input), которые мы получили на Акте 2.
# .copy() - это защитная руна, которая создает копию данных, чтобы избежать
# случайных проблем с изменением исходного образца.
result = transcriber(audio_input.copy())

# --- Акт 4: Демонстрация Результата ---

# Выводим заголовок.
print("\nРасшифрованное послание:")
# Результат - это словарь. Нас интересует текст, который лежит под ключом 'text'.
# Мы извлекаем и печатаем его.
print(result["text"])
