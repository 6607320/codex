# === locustfile.py ===
# Квест: 30.1 - "Проверка на Прочность"
# Цель: Написать "План Осады" для нашего иллюзорного легиона,
# используя гримуар Locust.

# --- Акт 1: Призыв Духов Легиона ---
# Из гримуара 'locust' мы призываем три сущности:
# HttpUser - чертеж для "воина", который умеет атаковать веб-порталы (HTTP).
# task - руна, которой мы помечаем приказ "Атаковать!".
# between - заклинание, определяющее случайные паузы в действиях воина.
from locust import HttpUser, task, between


# --- Акт 2: Создание Чертежа Нашего Воина ---
# Мы создаем наш собственный тип воина, наследуя его от HttpUser.
# Каждый "иллюзорный пользователь", которого создаст Locust, будет следовать этому чертежу.
class AmuletUser(HttpUser):
    # 'wait_time' - это врожденное свойство каждого воина.
    # 'between(1, 5)' приказывает ему после каждой атаки делать случайную паузу
    # от 1 до 5 секунд, чтобы симулировать поведение реального пользователя.
    wait_time = between(1, 5)

    # --- Акт 3: Приказ №1 - Атака на Врата Анализа ---
    # Руна '@task' превращает этот метод в боевое заклинание.
    # Locust будет случайным образом выбирать одно из помеченных заклинаний для каждого воина.
    @task
    def analyze_sentiment(self):
        # 'self.client' - это личное магическое оружие каждого воина для отправки HTTP-запросов.
        # '.post(...)' - приказ нанести удар методом POST.
        self.client.post(
            # Первая часть приказа - цель. Мы атакуем врата "/analyze".
            "/analyze",
            # Вторая часть - "осадный снаряд". Мы отправляем JSON-послание с текстом.
            json={"text": "This is a test sentence for the load test."}
        )

    # --- Акт 4: Приказ №2 - Атака на Врата Самопроверки ---
    # Мы помечаем и этот метод руной '@task', давая нашему легиону вторую цель.
    @task
    def validate_model(self):
        # Приказываем нанести удар методом POST по вратам "/validate".
        # Этим вратам не нужен "осадный снаряд", поэтому мы не передаем 'json'.
        self.client.post("/validate")