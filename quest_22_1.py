# Великий Кодекс Техномагии
# Свиток 22: Магический Компас
# Квест 22.1: Призыв Компаса (CLIP)

# --- Часть I: Импорт Магических Гримуаров ---

# Призываем 'requests' - духа-гонца, способного приносить артефакты (например, картинки) из сети.
import requests

# Призываем 'torch' - наш Источник Маны.
import torch

# Призываем 'Pillow' (PIL) - духа, умеющего работать с изображениями (открывать, изменять).
from PIL import Image

# Из гримуара 'transformers' призываем чертежи нашего мультимодального голема CLIP.
from transformers import CLIPModel, CLIPProcessor

# --- Часть II: Подготовка к Ритуалу ---

# Определяем устройство ('cuda' - Кристалл Маны GPU, 'cpu' - Разум CPU), где будет вершиться магия.
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
# Оповещаем о выбранном устройстве.
print(f"Магия будет вершиться на устройстве: {DEVICE}")

# --- Часть III: Главный Ритуал Призыва и Испытания ---
# Эта конструкция ('if __name__ == "__main__":') - священное начало любого пергамента.
if __name__ == "__main__":
    # --- Акт 1: Призыв Мультимодального Голема CLIP ---
    # Задаем имя чертежа, по которому будет призван наш голем.
    model_name = "openai/clip-vit-base-patch32"
    # Оповещаем о начале призыва.
    print(f"Призываем могущественного голема '{model_name}'...")

    # Призываем самого Голема CLIP и отправляем его на магический алтарь.
    model = CLIPModel.from_pretrained(model_name).to(DEVICE)
    # Призываем его верного "Толмача" (Processor). Этот толмач уникален - он умеет готовить и текст, и картинки.
    processor = CLIPProcessor.from_pretrained(model_name)
    # Сообщаем об успешном призыве.
    print("...Голем и его Толмач откликнулись на зов.")

    # --- Акт 2: Подготовка Артефактов для Испытания ---
    # Указываем путь к изображению в сети. Это классическое фото кота из датасета COCO.
    image_url = "http://images.cocodataset.org/val2017/000000039769.jpg"
    # Наш "гонец" 'requests' отправляется по указанному пути и приносит нам "сырую материю" изображения.
    # 'stream=True' - мудрая руна, позволяющая получать материю по частям.
    raw_image = requests.get(image_url, stream=True).raw
    # Дух 'Pillow' открывает эту сырую материю и превращает ее в полноценный объект "Изображение".
    image = Image.open(raw_image)

    # Создаем "свитки с заклинаниями" - текстовые описания, которые мы будем сравнивать с картинкой.
    text_descriptions = ["фотография кота", "рисунок собаки", "пейзаж с горами"]
    # Оповещаем о подготовке.
    print("\nПодготовлены артефакты для испытания:")
    # Выводим текстовые гипотезы.
    print(f"- Текстовые гипотезы: {text_descriptions}")

    # --- Акт 3: Магия Сопоставления ---
    # Мы передаем Толмачу картинку и все текстовые гипотезы разом.
    # Он сам знает, как подготовить каждый артефакт (нормализовать картинку, токенизировать текст).
    # 'return_tensors="pt"' - приказ "верни мне все в виде тензоров PyTorch".
    # '.to(DEVICE)' - немедленно отправляем подготовленные данные на наш магический алтарь.
    inputs = processor(
        text=text_descriptions, images=image, return_tensors="pt", padding=True
    ).to(DEVICE)

    # Отправляем подготовленные данные в "разум" Голема CLIP.
    # Голем вычисляет ауры для картинки и для каждого текста в общем пространстве смыслов.
    # Затем он вычисляет "резонанс" (логиты) между аурой картинки и аурой каждого текста.
    outputs = model(**inputs)
    # Извлекаем логиты - это "сырая" оценка схожести. Чем выше число, тем больше схожесть.
    logits_per_image = outputs.logits_per_image
    # Применяем заклинание 'softmax', чтобы превратить сырые оценки в понятные вероятности (от 0 до 1).
    probs = logits_per_image.softmax(dim=1)

    # --- Акт 4: Оглашение Вердикта ---
    # Сообщаем о результате.
    print("\n--- Вердикт Магического Компаса ---")
    # Превращаем тензор с вероятностями в обычный список numpy для удобства.
    # '.cpu().detach().numpy()' - стандартное заклинание для извлечения данных из тензора.
    probabilities = probs.cpu().detach().numpy()[0]

    # Проходим по каждой гипотезе и ее вероятности.
    for description, prob in zip(text_descriptions, probabilities):
        # Выводим результат. ':.2% - магическое форматирование, превращающее 0.99 в "99.00%".
        print(f"- Схожесть с '{description}': {prob:.2%}")

    # Финальное напутствие.
    print("\nРитуал завершен. Компас указал на истинный смысл.")
